// Code generated by protoc-gen-go. DO NOT EDIT.
// source: milvus.proto

package milvus_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// @brief Table name
type TableName struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableName) Reset()         { *m = TableName{} }
func (m *TableName) String() string { return proto.CompactTextString(m) }
func (*TableName) ProtoMessage()    {}
func (*TableName) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{0}
}

func (m *TableName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableName.Unmarshal(m, b)
}
func (m *TableName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableName.Marshal(b, m, deterministic)
}
func (m *TableName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableName.Merge(m, src)
}
func (m *TableName) XXX_Size() int {
	return xxx_messageInfo_TableName.Size(m)
}
func (m *TableName) XXX_DiscardUnknown() {
	xxx_messageInfo_TableName.DiscardUnknown(m)
}

var xxx_messageInfo_TableName proto.InternalMessageInfo

func (m *TableName) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

//*
// @brief Table name list
type TableNameList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TableNames           []string `protobuf:"bytes,2,rep,name=table_names,json=tableNames,proto3" json:"table_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableNameList) Reset()         { *m = TableNameList{} }
func (m *TableNameList) String() string { return proto.CompactTextString(m) }
func (*TableNameList) ProtoMessage()    {}
func (*TableNameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{1}
}

func (m *TableNameList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableNameList.Unmarshal(m, b)
}
func (m *TableNameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableNameList.Marshal(b, m, deterministic)
}
func (m *TableNameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableNameList.Merge(m, src)
}
func (m *TableNameList) XXX_Size() int {
	return xxx_messageInfo_TableNameList.Size(m)
}
func (m *TableNameList) XXX_DiscardUnknown() {
	xxx_messageInfo_TableNameList.DiscardUnknown(m)
}

var xxx_messageInfo_TableNameList proto.InternalMessageInfo

func (m *TableNameList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TableNameList) GetTableNames() []string {
	if m != nil {
		return m.TableNames
	}
	return nil
}

//*
// @brief Table schema
type TableSchema struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TableName            string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Dimension            int64    `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	IndexFileSize        int64    `protobuf:"varint,4,opt,name=index_file_size,json=indexFileSize,proto3" json:"index_file_size,omitempty"`
	MetricType           int32    `protobuf:"varint,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableSchema) Reset()         { *m = TableSchema{} }
func (m *TableSchema) String() string { return proto.CompactTextString(m) }
func (*TableSchema) ProtoMessage()    {}
func (*TableSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{2}
}

func (m *TableSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableSchema.Unmarshal(m, b)
}
func (m *TableSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableSchema.Marshal(b, m, deterministic)
}
func (m *TableSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSchema.Merge(m, src)
}
func (m *TableSchema) XXX_Size() int {
	return xxx_messageInfo_TableSchema.Size(m)
}
func (m *TableSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSchema.DiscardUnknown(m)
}

var xxx_messageInfo_TableSchema proto.InternalMessageInfo

func (m *TableSchema) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TableSchema) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *TableSchema) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

func (m *TableSchema) GetIndexFileSize() int64 {
	if m != nil {
		return m.IndexFileSize
	}
	return 0
}

func (m *TableSchema) GetMetricType() int32 {
	if m != nil {
		return m.MetricType
	}
	return 0
}

//*
// @brief Params of partition
type PartitionParam struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionParam) Reset()         { *m = PartitionParam{} }
func (m *PartitionParam) String() string { return proto.CompactTextString(m) }
func (*PartitionParam) ProtoMessage()    {}
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{3}
}

func (m *PartitionParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionParam.Unmarshal(m, b)
}
func (m *PartitionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionParam.Marshal(b, m, deterministic)
}
func (m *PartitionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionParam.Merge(m, src)
}
func (m *PartitionParam) XXX_Size() int {
	return xxx_messageInfo_PartitionParam.Size(m)
}
func (m *PartitionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionParam.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionParam proto.InternalMessageInfo

func (m *PartitionParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *PartitionParam) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionList) Reset()         { *m = PartitionList{} }
func (m *PartitionList) String() string { return proto.CompactTextString(m) }
func (*PartitionList) ProtoMessage()    {}
func (*PartitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{4}
}

func (m *PartitionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionList.Unmarshal(m, b)
}
func (m *PartitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionList.Marshal(b, m, deterministic)
}
func (m *PartitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionList.Merge(m, src)
}
func (m *PartitionList) XXX_Size() int {
	return xxx_messageInfo_PartitionList.Size(m)
}
func (m *PartitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionList.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionList proto.InternalMessageInfo

func (m *PartitionList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PartitionList) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Record inserted
type RowRecord struct {
	FloatData            []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"`
	BinaryData           []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RowRecord) Reset()         { *m = RowRecord{} }
func (m *RowRecord) String() string { return proto.CompactTextString(m) }
func (*RowRecord) ProtoMessage()    {}
func (*RowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{5}
}

func (m *RowRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowRecord.Unmarshal(m, b)
}
func (m *RowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowRecord.Marshal(b, m, deterministic)
}
func (m *RowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowRecord.Merge(m, src)
}
func (m *RowRecord) XXX_Size() int {
	return xxx_messageInfo_RowRecord.Size(m)
}
func (m *RowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RowRecord proto.InternalMessageInfo

func (m *RowRecord) GetFloatData() []float32 {
	if m != nil {
		return m.FloatData
	}
	return nil
}

func (m *RowRecord) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

//*
// @brief Params to be inserted
type InsertParam struct {
	TableName            string       `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RowRecordArray       []*RowRecord `protobuf:"bytes,2,rep,name=row_record_array,json=rowRecordArray,proto3" json:"row_record_array,omitempty"`
	RowIdArray           []int64      `protobuf:"varint,3,rep,packed,name=row_id_array,json=rowIdArray,proto3" json:"row_id_array,omitempty"`
	PartitionTag         string       `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InsertParam) Reset()         { *m = InsertParam{} }
func (m *InsertParam) String() string { return proto.CompactTextString(m) }
func (*InsertParam) ProtoMessage()    {}
func (*InsertParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{6}
}

func (m *InsertParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertParam.Unmarshal(m, b)
}
func (m *InsertParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertParam.Marshal(b, m, deterministic)
}
func (m *InsertParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertParam.Merge(m, src)
}
func (m *InsertParam) XXX_Size() int {
	return xxx_messageInfo_InsertParam.Size(m)
}
func (m *InsertParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertParam.DiscardUnknown(m)
}

var xxx_messageInfo_InsertParam proto.InternalMessageInfo

func (m *InsertParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *InsertParam) GetRowRecordArray() []*RowRecord {
	if m != nil {
		return m.RowRecordArray
	}
	return nil
}

func (m *InsertParam) GetRowIdArray() []int64 {
	if m != nil {
		return m.RowIdArray
	}
	return nil
}

func (m *InsertParam) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

//*
// @brief Vector ids
type VectorIds struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorIdArray        []int64  `protobuf:"varint,2,rep,packed,name=vector_id_array,json=vectorIdArray,proto3" json:"vector_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorIds) Reset()         { *m = VectorIds{} }
func (m *VectorIds) String() string { return proto.CompactTextString(m) }
func (*VectorIds) ProtoMessage()    {}
func (*VectorIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{7}
}

func (m *VectorIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorIds.Unmarshal(m, b)
}
func (m *VectorIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorIds.Marshal(b, m, deterministic)
}
func (m *VectorIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIds.Merge(m, src)
}
func (m *VectorIds) XXX_Size() int {
	return xxx_messageInfo_VectorIds.Size(m)
}
func (m *VectorIds) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIds.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIds proto.InternalMessageInfo

func (m *VectorIds) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorIds) GetVectorIdArray() []int64 {
	if m != nil {
		return m.VectorIdArray
	}
	return nil
}

//*
// @brief Params for searching vector
type SearchParam struct {
	TableName            string       `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	QueryRecordArray     []*RowRecord `protobuf:"bytes,2,rep,name=query_record_array,json=queryRecordArray,proto3" json:"query_record_array,omitempty"`
	Topk                 int64        `protobuf:"varint,3,opt,name=topk,proto3" json:"topk,omitempty"`
	Nprobe               int64        `protobuf:"varint,4,opt,name=nprobe,proto3" json:"nprobe,omitempty"`
	PartitionTagArray    []string     `protobuf:"bytes,5,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchParam) Reset()         { *m = SearchParam{} }
func (m *SearchParam) String() string { return proto.CompactTextString(m) }
func (*SearchParam) ProtoMessage()    {}
func (*SearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{8}
}

func (m *SearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParam.Unmarshal(m, b)
}
func (m *SearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParam.Marshal(b, m, deterministic)
}
func (m *SearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParam.Merge(m, src)
}
func (m *SearchParam) XXX_Size() int {
	return xxx_messageInfo_SearchParam.Size(m)
}
func (m *SearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParam proto.InternalMessageInfo

func (m *SearchParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *SearchParam) GetQueryRecordArray() []*RowRecord {
	if m != nil {
		return m.QueryRecordArray
	}
	return nil
}

func (m *SearchParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchParam) GetNprobe() int64 {
	if m != nil {
		return m.Nprobe
	}
	return 0
}

func (m *SearchParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Params for searching vector in files
type SearchInFilesParam struct {
	FileIdArray          []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam          *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchInFilesParam) Reset()         { *m = SearchInFilesParam{} }
func (m *SearchInFilesParam) String() string { return proto.CompactTextString(m) }
func (*SearchInFilesParam) ProtoMessage()    {}
func (*SearchInFilesParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{9}
}

func (m *SearchInFilesParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchInFilesParam.Unmarshal(m, b)
}
func (m *SearchInFilesParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchInFilesParam.Marshal(b, m, deterministic)
}
func (m *SearchInFilesParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchInFilesParam.Merge(m, src)
}
func (m *SearchInFilesParam) XXX_Size() int {
	return xxx_messageInfo_SearchInFilesParam.Size(m)
}
func (m *SearchInFilesParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchInFilesParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchInFilesParam proto.InternalMessageInfo

func (m *SearchInFilesParam) GetFileIdArray() []string {
	if m != nil {
		return m.FileIdArray
	}
	return nil
}

func (m *SearchInFilesParam) GetSearchParam() *SearchParam {
	if m != nil {
		return m.SearchParam
	}
	return nil
}

//*
// @brief Params for searching vector by ID
type SearchByIDParam struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Topk                 int64    `protobuf:"varint,3,opt,name=topk,proto3" json:"topk,omitempty"`
	Nprobe               int64    `protobuf:"varint,4,opt,name=nprobe,proto3" json:"nprobe,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,5,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchByIDParam) Reset()         { *m = SearchByIDParam{} }
func (m *SearchByIDParam) String() string { return proto.CompactTextString(m) }
func (*SearchByIDParam) ProtoMessage()    {}
func (*SearchByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{10}
}

func (m *SearchByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchByIDParam.Unmarshal(m, b)
}
func (m *SearchByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchByIDParam.Marshal(b, m, deterministic)
}
func (m *SearchByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchByIDParam.Merge(m, src)
}
func (m *SearchByIDParam) XXX_Size() int {
	return xxx_messageInfo_SearchByIDParam.Size(m)
}
func (m *SearchByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchByIDParam proto.InternalMessageInfo

func (m *SearchByIDParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *SearchByIDParam) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchByIDParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchByIDParam) GetNprobe() int64 {
	if m != nil {
		return m.Nprobe
	}
	return 0
}

func (m *SearchByIDParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Query result params
type TopKQueryResult struct {
	Status               *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RowNum               int64     `protobuf:"varint,2,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Ids                  []int64   `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Distances            []float32 `protobuf:"fixed32,4,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TopKQueryResult) Reset()         { *m = TopKQueryResult{} }
func (m *TopKQueryResult) String() string { return proto.CompactTextString(m) }
func (*TopKQueryResult) ProtoMessage()    {}
func (*TopKQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{11}
}

func (m *TopKQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopKQueryResult.Unmarshal(m, b)
}
func (m *TopKQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopKQueryResult.Marshal(b, m, deterministic)
}
func (m *TopKQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopKQueryResult.Merge(m, src)
}
func (m *TopKQueryResult) XXX_Size() int {
	return xxx_messageInfo_TopKQueryResult.Size(m)
}
func (m *TopKQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TopKQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_TopKQueryResult proto.InternalMessageInfo

func (m *TopKQueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TopKQueryResult) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *TopKQueryResult) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *TopKQueryResult) GetDistances() []float32 {
	if m != nil {
		return m.Distances
	}
	return nil
}

//*
// @brief Server string Reply
type StringReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply          string   `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringReply) Reset()         { *m = StringReply{} }
func (m *StringReply) String() string { return proto.CompactTextString(m) }
func (*StringReply) ProtoMessage()    {}
func (*StringReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{12}
}

func (m *StringReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringReply.Unmarshal(m, b)
}
func (m *StringReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringReply.Marshal(b, m, deterministic)
}
func (m *StringReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringReply.Merge(m, src)
}
func (m *StringReply) XXX_Size() int {
	return xxx_messageInfo_StringReply.Size(m)
}
func (m *StringReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StringReply.DiscardUnknown(m)
}

var xxx_messageInfo_StringReply proto.InternalMessageInfo

func (m *StringReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StringReply) GetStringReply() string {
	if m != nil {
		return m.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply            bool     `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolReply) Reset()         { *m = BoolReply{} }
func (m *BoolReply) String() string { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()    {}
func (*BoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{13}
}

func (m *BoolReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolReply.Unmarshal(m, b)
}
func (m *BoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolReply.Marshal(b, m, deterministic)
}
func (m *BoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolReply.Merge(m, src)
}
func (m *BoolReply) XXX_Size() int {
	return xxx_messageInfo_BoolReply.Size(m)
}
func (m *BoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_BoolReply proto.InternalMessageInfo

func (m *BoolReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoolReply) GetBoolReply() bool {
	if m != nil {
		return m.BoolReply
	}
	return false
}

//*
// @brief Return table row count
type TableRowCount struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TableRowCount        int64    `protobuf:"varint,2,opt,name=table_row_count,json=tableRowCount,proto3" json:"table_row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableRowCount) Reset()         { *m = TableRowCount{} }
func (m *TableRowCount) String() string { return proto.CompactTextString(m) }
func (*TableRowCount) ProtoMessage()    {}
func (*TableRowCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{14}
}

func (m *TableRowCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableRowCount.Unmarshal(m, b)
}
func (m *TableRowCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableRowCount.Marshal(b, m, deterministic)
}
func (m *TableRowCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableRowCount.Merge(m, src)
}
func (m *TableRowCount) XXX_Size() int {
	return xxx_messageInfo_TableRowCount.Size(m)
}
func (m *TableRowCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TableRowCount.DiscardUnknown(m)
}

var xxx_messageInfo_TableRowCount proto.InternalMessageInfo

func (m *TableRowCount) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TableRowCount) GetTableRowCount() int64 {
	if m != nil {
		return m.TableRowCount
	}
	return 0
}

//*
// @brief Give server Command
type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{15}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

//*
// @brief Index
// @index_type: 0-invalid, 1-idmap, 2-ivflat, 3-ivfsq8, 4-nsgmix
// @metric_type: 1-L2, 2-IP
type Index struct {
	IndexType            int32    `protobuf:"varint,1,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	Nlist                int32    `protobuf:"varint,2,opt,name=nlist,proto3" json:"nlist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{16}
}

func (m *Index) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Index.Unmarshal(m, b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Index.Marshal(b, m, deterministic)
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return xxx_messageInfo_Index.Size(m)
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetIndexType() int32 {
	if m != nil {
		return m.IndexType
	}
	return 0
}

func (m *Index) GetNlist() int32 {
	if m != nil {
		return m.Nlist
	}
	return 0
}

//*
// @brief Index params
type IndexParam struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TableName            string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Index                *Index   `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexParam) Reset()         { *m = IndexParam{} }
func (m *IndexParam) String() string { return proto.CompactTextString(m) }
func (*IndexParam) ProtoMessage()    {}
func (*IndexParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{17}
}

func (m *IndexParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexParam.Unmarshal(m, b)
}
func (m *IndexParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexParam.Marshal(b, m, deterministic)
}
func (m *IndexParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexParam.Merge(m, src)
}
func (m *IndexParam) XXX_Size() int {
	return xxx_messageInfo_IndexParam.Size(m)
}
func (m *IndexParam) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexParam.DiscardUnknown(m)
}

var xxx_messageInfo_IndexParam proto.InternalMessageInfo

func (m *IndexParam) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IndexParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *IndexParam) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

//*
// @brief Flush params
type FlushParam struct {
	TableNameArray       []string `protobuf:"bytes,1,rep,name=table_name_array,json=tableNameArray,proto3" json:"table_name_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushParam) Reset()         { *m = FlushParam{} }
func (m *FlushParam) String() string { return proto.CompactTextString(m) }
func (*FlushParam) ProtoMessage()    {}
func (*FlushParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{18}
}

func (m *FlushParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushParam.Unmarshal(m, b)
}
func (m *FlushParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushParam.Marshal(b, m, deterministic)
}
func (m *FlushParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushParam.Merge(m, src)
}
func (m *FlushParam) XXX_Size() int {
	return xxx_messageInfo_FlushParam.Size(m)
}
func (m *FlushParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushParam.DiscardUnknown(m)
}

var xxx_messageInfo_FlushParam proto.InternalMessageInfo

func (m *FlushParam) GetTableNameArray() []string {
	if m != nil {
		return m.TableNameArray
	}
	return nil
}

//*
// @brief Flush params
type DeleteByIDParam struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteByIDParam) Reset()         { *m = DeleteByIDParam{} }
func (m *DeleteByIDParam) String() string { return proto.CompactTextString(m) }
func (*DeleteByIDParam) ProtoMessage()    {}
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{19}
}

func (m *DeleteByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteByIDParam.Unmarshal(m, b)
}
func (m *DeleteByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteByIDParam.Marshal(b, m, deterministic)
}
func (m *DeleteByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteByIDParam.Merge(m, src)
}
func (m *DeleteByIDParam) XXX_Size() int {
	return xxx_messageInfo_DeleteByIDParam.Size(m)
}
func (m *DeleteByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteByIDParam proto.InternalMessageInfo

func (m *DeleteByIDParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

//*
// @brief segment statistics
type SegmentStat struct {
	SegmentName          string   `protobuf:"bytes,1,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	RowCount             int64    `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	IndexName            string   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	DataSize             int64    `protobuf:"varint,4,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentStat) Reset()         { *m = SegmentStat{} }
func (m *SegmentStat) String() string { return proto.CompactTextString(m) }
func (*SegmentStat) ProtoMessage()    {}
func (*SegmentStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{20}
}

func (m *SegmentStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentStat.Unmarshal(m, b)
}
func (m *SegmentStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentStat.Marshal(b, m, deterministic)
}
func (m *SegmentStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentStat.Merge(m, src)
}
func (m *SegmentStat) XXX_Size() int {
	return xxx_messageInfo_SegmentStat.Size(m)
}
func (m *SegmentStat) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentStat.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentStat proto.InternalMessageInfo

func (m *SegmentStat) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

func (m *SegmentStat) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *SegmentStat) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SegmentStat) GetDataSize() int64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

//*
// @brief table statistics
type PartitionStat struct {
	Tag                  string         `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	TotalRowCount        int64          `protobuf:"varint,2,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	SegmentsStat         []*SegmentStat `protobuf:"bytes,3,rep,name=segments_stat,json=segmentsStat,proto3" json:"segments_stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PartitionStat) Reset()         { *m = PartitionStat{} }
func (m *PartitionStat) String() string { return proto.CompactTextString(m) }
func (*PartitionStat) ProtoMessage()    {}
func (*PartitionStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{21}
}

func (m *PartitionStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStat.Unmarshal(m, b)
}
func (m *PartitionStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStat.Marshal(b, m, deterministic)
}
func (m *PartitionStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStat.Merge(m, src)
}
func (m *PartitionStat) XXX_Size() int {
	return xxx_messageInfo_PartitionStat.Size(m)
}
func (m *PartitionStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStat.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStat proto.InternalMessageInfo

func (m *PartitionStat) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PartitionStat) GetTotalRowCount() int64 {
	if m != nil {
		return m.TotalRowCount
	}
	return 0
}

func (m *PartitionStat) GetSegmentsStat() []*SegmentStat {
	if m != nil {
		return m.SegmentsStat
	}
	return nil
}

//*
// @brief table information
type TableInfo struct {
	Status               *Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalRowCount        int64            `protobuf:"varint,2,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	PartitionsStat       []*PartitionStat `protobuf:"bytes,3,rep,name=partitions_stat,json=partitionsStat,proto3" json:"partitions_stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{22}
}

func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableInfo.Unmarshal(m, b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
}
func (m *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(m, src)
}
func (m *TableInfo) XXX_Size() int {
	return xxx_messageInfo_TableInfo.Size(m)
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TableInfo) GetTotalRowCount() int64 {
	if m != nil {
		return m.TotalRowCount
	}
	return 0
}

func (m *TableInfo) GetPartitionsStat() []*PartitionStat {
	if m != nil {
		return m.PartitionsStat
	}
	return nil
}

//*
// @brief vector identity
type VectorIdentity struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorIdentity) Reset()         { *m = VectorIdentity{} }
func (m *VectorIdentity) String() string { return proto.CompactTextString(m) }
func (*VectorIdentity) ProtoMessage()    {}
func (*VectorIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{23}
}

func (m *VectorIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorIdentity.Unmarshal(m, b)
}
func (m *VectorIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorIdentity.Marshal(b, m, deterministic)
}
func (m *VectorIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIdentity.Merge(m, src)
}
func (m *VectorIdentity) XXX_Size() int {
	return xxx_messageInfo_VectorIdentity.Size(m)
}
func (m *VectorIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIdentity proto.InternalMessageInfo

func (m *VectorIdentity) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *VectorIdentity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//*
// @brief vector data
type VectorData struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorData           *RowRecord `protobuf:"bytes,2,opt,name=vector_data,json=vectorData,proto3" json:"vector_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VectorData) Reset()         { *m = VectorData{} }
func (m *VectorData) String() string { return proto.CompactTextString(m) }
func (*VectorData) ProtoMessage()    {}
func (*VectorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{24}
}

func (m *VectorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorData.Unmarshal(m, b)
}
func (m *VectorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorData.Marshal(b, m, deterministic)
}
func (m *VectorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorData.Merge(m, src)
}
func (m *VectorData) XXX_Size() int {
	return xxx_messageInfo_VectorData.Size(m)
}
func (m *VectorData) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorData.DiscardUnknown(m)
}

var xxx_messageInfo_VectorData proto.InternalMessageInfo

func (m *VectorData) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorData) GetVectorData() *RowRecord {
	if m != nil {
		return m.VectorData
	}
	return nil
}

//*
// @brief get vector ids from a segment parameters
type GetVectorIDsParam struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SegmentName          string   `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVectorIDsParam) Reset()         { *m = GetVectorIDsParam{} }
func (m *GetVectorIDsParam) String() string { return proto.CompactTextString(m) }
func (*GetVectorIDsParam) ProtoMessage()    {}
func (*GetVectorIDsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{25}
}

func (m *GetVectorIDsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVectorIDsParam.Unmarshal(m, b)
}
func (m *GetVectorIDsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVectorIDsParam.Marshal(b, m, deterministic)
}
func (m *GetVectorIDsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVectorIDsParam.Merge(m, src)
}
func (m *GetVectorIDsParam) XXX_Size() int {
	return xxx_messageInfo_GetVectorIDsParam.Size(m)
}
func (m *GetVectorIDsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVectorIDsParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetVectorIDsParam proto.InternalMessageInfo

func (m *GetVectorIDsParam) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *GetVectorIDsParam) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

func init() {
	proto.RegisterType((*TableName)(nil), "milvus.grpc.TableName")
	proto.RegisterType((*TableNameList)(nil), "milvus.grpc.TableNameList")
	proto.RegisterType((*TableSchema)(nil), "milvus.grpc.TableSchema")
	proto.RegisterType((*PartitionParam)(nil), "milvus.grpc.PartitionParam")
	proto.RegisterType((*PartitionList)(nil), "milvus.grpc.PartitionList")
	proto.RegisterType((*RowRecord)(nil), "milvus.grpc.RowRecord")
	proto.RegisterType((*InsertParam)(nil), "milvus.grpc.InsertParam")
	proto.RegisterType((*VectorIds)(nil), "milvus.grpc.VectorIds")
	proto.RegisterType((*SearchParam)(nil), "milvus.grpc.SearchParam")
	proto.RegisterType((*SearchInFilesParam)(nil), "milvus.grpc.SearchInFilesParam")
	proto.RegisterType((*SearchByIDParam)(nil), "milvus.grpc.SearchByIDParam")
	proto.RegisterType((*TopKQueryResult)(nil), "milvus.grpc.TopKQueryResult")
	proto.RegisterType((*StringReply)(nil), "milvus.grpc.StringReply")
	proto.RegisterType((*BoolReply)(nil), "milvus.grpc.BoolReply")
	proto.RegisterType((*TableRowCount)(nil), "milvus.grpc.TableRowCount")
	proto.RegisterType((*Command)(nil), "milvus.grpc.Command")
	proto.RegisterType((*Index)(nil), "milvus.grpc.Index")
	proto.RegisterType((*IndexParam)(nil), "milvus.grpc.IndexParam")
	proto.RegisterType((*FlushParam)(nil), "milvus.grpc.FlushParam")
	proto.RegisterType((*DeleteByIDParam)(nil), "milvus.grpc.DeleteByIDParam")
	proto.RegisterType((*SegmentStat)(nil), "milvus.grpc.SegmentStat")
	proto.RegisterType((*PartitionStat)(nil), "milvus.grpc.PartitionStat")
	proto.RegisterType((*TableInfo)(nil), "milvus.grpc.TableInfo")
	proto.RegisterType((*VectorIdentity)(nil), "milvus.grpc.VectorIdentity")
	proto.RegisterType((*VectorData)(nil), "milvus.grpc.VectorData")
	proto.RegisterType((*GetVectorIDsParam)(nil), "milvus.grpc.GetVectorIDsParam")
}

func init() { proto.RegisterFile("milvus.proto", fileDescriptor_02345ba45cc0e303) }

var fileDescriptor_02345ba45cc0e303 = []byte{
	// 1344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5d, 0x73, 0x1b, 0x35,
	0x17, 0xf6, 0xda, 0x75, 0x9a, 0x3d, 0xeb, 0x8f, 0x54, 0xed, 0xb4, 0x7e, 0xd3, 0xf6, 0xad, 0x11,
	0x33, 0x1d, 0x0f, 0xcc, 0xe4, 0x22, 0xcc, 0x50, 0x06, 0x5a, 0x68, 0x13, 0xd3, 0xd6, 0x14, 0x3a,
	0x61, 0x1d, 0xe0, 0xaa, 0x63, 0x64, 0xaf, 0x9a, 0xee, 0xb0, 0xbb, 0x5a, 0x24, 0x39, 0xc1, 0xbd,
	0xe4, 0x06, 0xf8, 0x0f, 0xdc, 0xf2, 0x13, 0xb8, 0xe7, 0x9e, 0x19, 0x7e, 0x13, 0x23, 0x69, 0x3f,
	0x9d, 0x6c, 0x62, 0x17, 0xb8, 0x5b, 0x1d, 0xe9, 0x3c, 0x7a, 0xce, 0xd1, 0xf9, 0xb2, 0xa1, 0x15,
	0xfa, 0xc1, 0xf1, 0x5c, 0xec, 0xc4, 0x9c, 0x49, 0x86, 0x9c, 0x64, 0x75, 0xc4, 0xe3, 0xd9, 0x76,
	0x4b, 0x48, 0x22, 0xd3, 0x2d, 0xfc, 0x0e, 0xd8, 0x87, 0x64, 0x1a, 0xd0, 0xe7, 0x24, 0xa4, 0xe8,
	0x36, 0x80, 0x54, 0x8b, 0x49, 0x44, 0x42, 0xda, 0xb3, 0xfa, 0xd6, 0xc0, 0x76, 0x6d, 0x99, 0x6e,
	0xe3, 0x17, 0xd0, 0xce, 0xce, 0x7e, 0xee, 0x0b, 0x89, 0xde, 0x85, 0x0d, 0x03, 0xa6, 0xcf, 0x3a,
	0xbb, 0x57, 0x77, 0x0a, 0x17, 0xed, 0x8c, 0xf5, 0x96, 0x9b, 0x1c, 0x41, 0x77, 0xc0, 0xc9, 0xc1,
	0x45, 0xaf, 0xde, 0x6f, 0x0c, 0x6c, 0x17, 0x32, 0x74, 0x81, 0xff, 0xb0, 0xc0, 0xd1, 0xf8, 0xe3,
	0xd9, 0x2b, 0x1a, 0x92, 0xf5, 0xd0, 0xcb, 0xd4, 0xeb, 0x4b, 0xd4, 0xd1, 0x2d, 0xb0, 0x3d, 0x3f,
	0xa4, 0x91, 0xf0, 0x59, 0xd4, 0x6b, 0xf4, 0xad, 0x41, 0xc3, 0xcd, 0x05, 0xe8, 0x2e, 0x74, 0xfd,
	0xc8, 0xa3, 0x3f, 0x4c, 0x5e, 0xfa, 0x01, 0x9d, 0x08, 0xff, 0x35, 0xed, 0x5d, 0xd2, 0x67, 0xda,
	0x5a, 0xfc, 0xd8, 0x0f, 0xe8, 0xd8, 0x7f, 0x4d, 0x95, 0x09, 0x21, 0x95, 0xdc, 0x9f, 0x4d, 0xe4,
	0x22, 0xa6, 0xbd, 0x66, 0xdf, 0x1a, 0x34, 0x5d, 0x30, 0xa2, 0xc3, 0x45, 0x4c, 0xf1, 0x23, 0xe8,
	0x1c, 0x10, 0x2e, 0x7d, 0xe9, 0xb3, 0xe8, 0x80, 0x70, 0x12, 0x5e, 0xe0, 0x52, 0xb4, 0x05, 0x0d,
	0x49, 0x8e, 0x12, 0xbe, 0xea, 0x13, 0x07, 0xd0, 0xce, 0x20, 0xd6, 0x77, 0xf2, 0x0e, 0x5c, 0x8d,
	0x53, 0xed, 0x89, 0x24, 0x47, 0x13, 0xc2, 0x39, 0x59, 0x24, 0xce, 0xbe, 0x92, 0x6d, 0x1d, 0x92,
	0xa3, 0x47, 0x6a, 0x03, 0x3f, 0x03, 0xdb, 0x65, 0x27, 0x2e, 0x9d, 0x31, 0xee, 0x29, 0xae, 0x2f,
	0x03, 0x46, 0xe4, 0xc4, 0x23, 0x92, 0xf4, 0xac, 0x7e, 0x63, 0x50, 0x77, 0x6d, 0x2d, 0x19, 0x12,
	0x49, 0x94, 0xf5, 0x53, 0x3f, 0x22, 0x7c, 0x61, 0xf6, 0x15, 0xe7, 0x96, 0x0b, 0x46, 0xa4, 0x0e,
	0xe0, 0xdf, 0x2d, 0x70, 0x46, 0x91, 0xa0, 0x5c, 0xae, 0x64, 0xfb, 0x43, 0xd8, 0xe2, 0xec, 0x64,
	0xc2, 0xf5, 0xe5, 0x05, 0xa2, 0xce, 0xee, 0xf5, 0x92, 0x89, 0x19, 0x41, 0xb7, 0xc3, 0xd3, 0x4f,
	0xcd, 0x1e, 0xf5, 0xa1, 0xa5, 0x10, 0xfc, 0x54, 0xbb, 0xd1, 0x6f, 0x0c, 0x1a, 0x2e, 0x70, 0x76,
	0x32, 0x4a, 0x4e, 0xbc, 0x0d, 0xed, 0x92, 0x3f, 0xf4, 0xbb, 0xda, 0x6e, 0xab, 0xe8, 0x09, 0xfc,
	0x2d, 0xd8, 0x5f, 0xd3, 0x99, 0x64, 0x7c, 0xe4, 0x89, 0xf5, 0xdc, 0x7d, 0x17, 0xba, 0xc7, 0x5a,
	0x33, 0xe7, 0x50, 0xd7, 0x1c, 0xda, 0xc7, 0x09, 0xa0, 0x71, 0xf3, 0x5f, 0x16, 0x38, 0x63, 0x4a,
	0xf8, 0xec, 0xd5, 0x4a, 0x9e, 0x19, 0x02, 0xfa, 0x7e, 0x4e, 0xf9, 0x62, 0x1d, 0xdf, 0x6c, 0x69,
	0x8d, 0xa2, 0x77, 0x10, 0x5c, 0x92, 0x2c, 0xfe, 0x2e, 0x09, 0x77, 0xfd, 0x8d, 0xae, 0xc3, 0x46,
	0x14, 0x73, 0x36, 0x4d, 0x03, 0x3c, 0x59, 0x55, 0xc5, 0x4d, 0xb3, 0x2a, 0x6e, 0xe6, 0x80, 0x8c,
	0x3d, 0xa3, 0x48, 0x65, 0x87, 0x30, 0x66, 0x61, 0x68, 0xeb, 0x0c, 0xca, 0x9c, 0x61, 0x69, 0x7d,
	0x47, 0x09, 0xd3, 0x17, 0xf9, 0x08, 0x5a, 0x42, 0x6b, 0x4e, 0x62, 0xa5, 0xa3, 0xc3, 0xc8, 0xd9,
	0xed, 0x95, 0xbd, 0x9c, 0xbb, 0xca, 0x75, 0x44, 0xbe, 0xc0, 0xbf, 0x5a, 0xd0, 0x35, 0x9b, 0x7b,
	0x8b, 0xd1, 0x70, 0x25, 0x5f, 0x76, 0xa0, 0xee, 0x7b, 0xfa, 0x96, 0x86, 0x5b, 0xf7, 0xbd, 0xff,
	0xd4, 0x2b, 0x3f, 0x59, 0xd0, 0x3d, 0x64, 0xf1, 0xb3, 0x2f, 0xcd, 0x53, 0x88, 0x79, 0xb0, 0x66,
	0xfa, 0xde, 0x80, 0xcb, 0x2a, 0xa0, 0xa3, 0x79, 0x98, 0x30, 0xde, 0xe0, 0xec, 0xe4, 0xf9, 0x3c,
	0x54, 0x75, 0xc2, 0xf7, 0x44, 0x12, 0xe0, 0xea, 0xd3, 0x54, 0x34, 0x21, 0x49, 0x34, 0xa3, 0xa2,
	0x77, 0xc9, 0xe4, 0x6a, 0x26, 0xc0, 0x2f, 0xc0, 0x19, 0x4b, 0xee, 0x47, 0x47, 0x2e, 0x8d, 0x83,
	0xc5, 0x7a, 0x24, 0xde, 0x82, 0x96, 0xd0, 0xba, 0x13, 0xae, 0x94, 0x93, 0xe2, 0xe4, 0x88, 0x1c,
	0x0f, 0x7f, 0x03, 0xf6, 0x1e, 0x63, 0xc1, 0x1b, 0x80, 0xdf, 0x06, 0x98, 0x32, 0x16, 0x14, 0xa0,
	0x37, 0x5d, 0x7b, 0x9a, 0x62, 0x61, 0x2f, 0x69, 0x31, 0x2e, 0x3b, 0xd9, 0x67, 0xf3, 0x48, 0xae,
	0x9d, 0x8e, 0x26, 0x14, 0x94, 0x13, 0x67, 0x4a, 0x3f, 0x71, 0x63, 0x5b, 0x16, 0x41, 0xf1, 0x4d,
	0xb8, 0xbc, 0xcf, 0xc2, 0x90, 0x44, 0x9e, 0x72, 0xec, 0x2c, 0xf4, 0x92, 0xb0, 0x51, 0x9f, 0xf8,
	0x3e, 0x34, 0x47, 0xaa, 0xea, 0x2b, 0xaa, 0xa6, 0x2b, 0xe8, 0x62, 0x6f, 0xe9, 0x62, 0x6f, 0x6b,
	0x89, 0xaa, 0xf5, 0xe8, 0x1a, 0x34, 0xa3, 0xc0, 0x17, 0xe6, 0x8a, 0xa6, 0x6b, 0x16, 0xf8, 0x47,
	0x0b, 0x40, 0xab, 0x9b, 0xe0, 0xfc, 0x37, 0x7b, 0xd8, 0x00, 0x9a, 0xfa, 0x76, 0x1d, 0xba, 0xce,
	0x2e, 0x2a, 0x41, 0xe9, 0x3b, 0x5d, 0x73, 0x00, 0xbf, 0x0f, 0xf0, 0x38, 0x98, 0x8b, 0xa4, 0xd8,
	0x0c, 0x60, 0x2b, 0x87, 0x2d, 0x25, 0x66, 0x27, 0x03, 0x4f, 0xbb, 0x41, 0x77, 0x48, 0x03, 0x2a,
	0xe9, 0xca, 0xd9, 0xf5, 0x3f, 0xd8, 0x5c, 0xaa, 0x7c, 0x97, 0xfd, 0xa4, 0xe6, 0xfd, 0xa2, 0x6b,
	0xde, 0x51, 0x48, 0x23, 0xa9, 0xec, 0xd4, 0x61, 0x65, 0x96, 0x45, 0x2c, 0x27, 0x91, 0x69, 0xb4,
	0x9b, 0x60, 0x2f, 0xbf, 0xdc, 0x26, 0x4f, 0x23, 0x21, 0x7b, 0x0e, 0xad, 0xdd, 0x30, 0x4c, 0xb4,
	0x24, 0xd5, 0x55, 0x6d, 0xa9, 0xd8, 0xbd, 0x37, 0x95, 0x40, 0x35, 0x6e, 0xfc, 0xb3, 0x55, 0xe8,
	0xaa, 0x9a, 0x4d, 0xd2, 0x78, 0xad, 0xac, 0xf1, 0xea, 0xe0, 0x61, 0x92, 0x04, 0x67, 0x04, 0x8f,
	0x12, 0x67, 0x11, 0xf9, 0x00, 0xda, 0x09, 0x67, 0x31, 0x51, 0x0f, 0xa7, 0x93, 0xf2, 0x74, 0x05,
	0xcb, 0x0c, 0x77, 0x53, 0xb3, 0x85, 0x5a, 0xe1, 0xdf, 0xac, 0x64, 0xe2, 0x1a, 0x45, 0x2f, 0xd9,
	0xfa, 0xe1, 0xbd, 0x0a, 0xc3, 0x7d, 0xe8, 0x66, 0xb5, 0xa9, 0xc4, 0x71, 0xbb, 0x84, 0x5e, 0x72,
	0x88, 0xdb, 0xc9, 0x55, 0x34, 0xcf, 0x4f, 0xa0, 0x93, 0x36, 0x45, 0x1a, 0x49, 0x5f, 0x2e, 0xd6,
	0x2c, 0xb4, 0x98, 0x03, 0x18, 0x00, 0x3d, 0x3c, 0xac, 0x65, 0xe8, 0x3d, 0x70, 0x92, 0xb6, 0x9a,
	0x4d, 0x1a, 0xd5, 0x8d, 0x0f, 0x8e, 0xb3, 0x5b, 0xf0, 0x57, 0x70, 0xe5, 0x09, 0x95, 0x09, 0xef,
	0xa1, 0x58, 0x29, 0x84, 0x97, 0xe3, 0xb2, 0x7e, 0x2a, 0x2e, 0x77, 0xff, 0x6c, 0x41, 0xfb, 0x0b,
	0x7d, 0xf9, 0x98, 0xf2, 0x63, 0x7f, 0x46, 0xd1, 0xc7, 0xe0, 0xec, 0x73, 0x4a, 0x24, 0xd5, 0x4f,
	0x89, 0xca, 0x8f, 0x5f, 0x18, 0x62, 0xb7, 0xcf, 0xb2, 0x13, 0xd7, 0xd0, 0x7d, 0xd8, 0x7c, 0x4a,
	0x84, 0x51, 0xbe, 0x7e, 0x5a, 0x59, 0xdd, 0xba, 0x5d, 0x96, 0x67, 0xf5, 0x16, 0xd7, 0xd0, 0x3e,
	0xb4, 0x87, 0x54, 0xcc, 0xb8, 0x3f, 0xa5, 0xe7, 0x43, 0x54, 0xf2, 0xc2, 0x35, 0xb4, 0x07, 0xa0,
	0xc3, 0xe5, 0x7c, 0x84, 0xed, 0xd3, 0xf2, 0xac, 0x8c, 0xd6, 0xd0, 0x43, 0x80, 0xf1, 0x2b, 0x76,
	0xa2, 0xc5, 0x02, 0x5d, 0x2b, 0x9d, 0x4d, 0x2a, 0xec, 0x59, 0x08, 0xe9, 0x0f, 0x08, 0x5c, 0x43,
	0x8f, 0xa0, 0x9d, 0x21, 0xe8, 0x8c, 0x58, 0xcd, 0x1b, 0xd9, 0x79, 0x5c, 0x43, 0x1f, 0x82, 0x3d,
	0xe4, 0x2c, 0x3e, 0xdf, 0x8e, 0x8a, 0x77, 0x78, 0x90, 0xbe, 0xa3, 0x29, 0xf9, 0x37, 0x4e, 0xd7,
	0x54, 0x1d, 0x43, 0x55, 0xea, 0x7b, 0xf9, 0x43, 0x18, 0x80, 0xaa, 0xeb, 0xab, 0x80, 0x73, 0xfa,
	0xe7, 0xeb, 0x57, 0xdc, 0xff, 0x29, 0x74, 0x0d, 0xfd, 0x2c, 0x97, 0xd1, 0xcd, 0xb3, 0x73, 0xfc,
	0x5c, 0x33, 0x1e, 0x43, 0x47, 0x3d, 0x42, 0x76, 0x58, 0xac, 0x18, 0x0e, 0xa5, 0x1f, 0x2a, 0x49,
	0x5c, 0x72, 0x16, 0xff, 0x33, 0x32, 0xf7, 0x61, 0xc3, 0xfc, 0x88, 0x58, 0xca, 0xaa, 0xc2, 0x2f,
	0x8b, 0xa5, 0x60, 0xc8, 0x86, 0x77, 0x5c, 0x43, 0x4f, 0xa0, 0x9d, 0x55, 0x00, 0xd5, 0xc5, 0x96,
	0x28, 0x94, 0x4b, 0xda, 0xd2, 0xb3, 0xe4, 0xe5, 0x0a, 0xd7, 0xd0, 0x53, 0x68, 0x15, 0x4b, 0x09,
	0xfa, 0x7f, 0xe9, 0xe8, 0xa9, 0x2a, 0x73, 0x0e, 0xa5, 0x3d, 0xd8, 0x30, 0x33, 0x2b, 0xaa, 0x9c,
	0x72, 0xb7, 0x6f, 0x95, 0xfd, 0x5d, 0x9e, 0x21, 0x71, 0x0d, 0x7d, 0x06, 0x90, 0xcf, 0xbd, 0xe8,
	0xd6, 0x19, 0x38, 0x59, 0xcb, 0xbe, 0x10, 0xeb, 0x00, 0xda, 0xa5, 0xd9, 0x1d, 0xdd, 0x39, 0x03,
	0xae, 0x38, 0xd7, 0x5f, 0x88, 0x78, 0x0f, 0x1a, 0xfb, 0xa1, 0x57, 0x91, 0xff, 0x4b, 0x46, 0x17,
	0xa6, 0x48, 0x95, 0xfd, 0x90, 0x0f, 0x1c, 0x4b, 0x66, 0x2d, 0x4d, 0x22, 0xd5, 0x19, 0xdc, 0x3a,
	0xe0, 0x34, 0x60, 0xc4, 0x7b, 0xa3, 0x02, 0x70, 0x0f, 0x9a, 0x7a, 0x54, 0x5a, 0x4a, 0xfd, 0x7c,
	0x7c, 0xaa, 0x52, 0xfc, 0x40, 0xcf, 0x90, 0x31, 0x99, 0xc9, 0x35, 0xaf, 0x9c, 0x6e, 0xe8, 0x7f,
	0x5e, 0xde, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xee, 0x79, 0x98, 0x76, 0xa4, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilvusServiceClient interface {
	//*
	// @brief This method is used to create table
	//
	// @param TableSchema, use to provide table information to be created.
	//
	// @return Status
	CreateTable(ctx context.Context, in *TableSchema, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test table existence.
	//
	// @param TableName, table name is going to be tested.
	//
	// @return BoolReply
	HasTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to get table schema.
	//
	// @param TableName, target table name.
	//
	// @return TableSchema
	DescribeTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableSchema, error)
	//*
	// @brief This method is used to get table schema.
	//
	// @param TableName, target table name.
	//
	// @return TableRowCount
	CountTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableRowCount, error)
	//*
	// @brief This method is used to list all tables.
	//
	// @param Command, dummy parameter.
	//
	// @return TableNameList
	ShowTables(ctx context.Context, in *Command, opts ...grpc.CallOption) (*TableNameList, error)
	//*
	// @brief This method is used to get table detail information.
	//
	// @param TableName, target table name.
	//
	// @return TableInfo
	ShowTableInfo(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableInfo, error)
	//*
	// @brief This method is used to delete table.
	//
	// @param TableName, table name is going to be deleted.
	//
	// @return TableNameList
	DropTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to build index by table in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param TableName, target table name.
	//
	// @return IndexParam
	DescribeIndex(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param TableName, target table name.
	//
	// @return Status
	DropIndex(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param TableName, target table name.
	//
	// @return PartitionList
	ShowPartitions(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to add vector array to table.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to get vector data by id.
	//
	// @param VectorIdentity, target vector id.
	//
	// @return VectorData
	GetVectorByID(ctx context.Context, in *VectorIdentity, opts ...grpc.CallOption) (*VectorData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target table and segment
	//
	// @return VectorIds
	GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in table.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to preload table
	//
	// @param TableName, target table name.
	//
	// @return Status
	PreloadTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to compact table
	//
	// @param TableName, target table name.
	//
	// @return Status
	Compact(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error)
}

type milvusServiceClient struct {
	cc *grpc.ClientConn
}

func NewMilvusServiceClient(cc *grpc.ClientConn) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateTable(ctx context.Context, in *TableSchema, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableSchema, error) {
	out := new(TableSchema)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableRowCount, error) {
	out := new(TableRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowTables(ctx context.Context, in *Command, opts ...grpc.CallOption) (*TableNameList, error) {
	out := new(TableNameList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowTableInfo(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableInfo, error) {
	out := new(TableInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowTableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*IndexParam, error) {
	out := new(IndexParam)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*PartitionList, error) {
	out := new(PartitionList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorByID(ctx context.Context, in *VectorIdentity, opts ...grpc.CallOption) (*VectorData, error) {
	out := new(VectorData)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchInFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Compact(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
type MilvusServiceServer interface {
	//*
	// @brief This method is used to create table
	//
	// @param TableSchema, use to provide table information to be created.
	//
	// @return Status
	CreateTable(context.Context, *TableSchema) (*Status, error)
	//*
	// @brief This method is used to test table existence.
	//
	// @param TableName, table name is going to be tested.
	//
	// @return BoolReply
	HasTable(context.Context, *TableName) (*BoolReply, error)
	//*
	// @brief This method is used to get table schema.
	//
	// @param TableName, target table name.
	//
	// @return TableSchema
	DescribeTable(context.Context, *TableName) (*TableSchema, error)
	//*
	// @brief This method is used to get table schema.
	//
	// @param TableName, target table name.
	//
	// @return TableRowCount
	CountTable(context.Context, *TableName) (*TableRowCount, error)
	//*
	// @brief This method is used to list all tables.
	//
	// @param Command, dummy parameter.
	//
	// @return TableNameList
	ShowTables(context.Context, *Command) (*TableNameList, error)
	//*
	// @brief This method is used to get table detail information.
	//
	// @param TableName, target table name.
	//
	// @return TableInfo
	ShowTableInfo(context.Context, *TableName) (*TableInfo, error)
	//*
	// @brief This method is used to delete table.
	//
	// @param TableName, table name is going to be deleted.
	//
	// @return TableNameList
	DropTable(context.Context, *TableName) (*Status, error)
	//*
	// @brief This method is used to build index by table in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param TableName, target table name.
	//
	// @return IndexParam
	DescribeIndex(context.Context, *TableName) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param TableName, target table name.
	//
	// @return Status
	DropIndex(context.Context, *TableName) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param TableName, target table name.
	//
	// @return PartitionList
	ShowPartitions(context.Context, *TableName) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to add vector array to table.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(context.Context, *InsertParam) (*VectorIds, error)
	//*
	// @brief This method is used to get vector data by id.
	//
	// @param VectorIdentity, target vector id.
	//
	// @return VectorData
	GetVectorByID(context.Context, *VectorIdentity) (*VectorData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target table and segment
	//
	// @return VectorIds
	GetVectorIDs(context.Context, *GetVectorIDsParam) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in table.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(context.Context, *SearchParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(context.Context, *SearchByIDParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(context.Context, *SearchInFilesParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(context.Context, *Command) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(context.Context, *DeleteByIDParam) (*Status, error)
	//*
	// @brief This method is used to preload table
	//
	// @param TableName, target table name.
	//
	// @return Status
	PreloadTable(context.Context, *TableName) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(context.Context, *FlushParam) (*Status, error)
	//*
	// @brief This method is used to compact table
	//
	// @param TableName, target table name.
	//
	// @return Status
	Compact(context.Context, *TableName) (*Status, error)
}

// UnimplementedMilvusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (*UnimplementedMilvusServiceServer) CreateTable(ctx context.Context, req *TableSchema) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedMilvusServiceServer) HasTable(ctx context.Context, req *TableName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasTable not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeTable(ctx context.Context, req *TableName) (*TableSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (*UnimplementedMilvusServiceServer) CountTable(ctx context.Context, req *TableName) (*TableRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTable not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowTables(ctx context.Context, req *Command) (*TableNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTables not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowTableInfo(ctx context.Context, req *TableName) (*TableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTableInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) DropTable(ctx context.Context, req *TableName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateIndex(ctx context.Context, req *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeIndex(ctx context.Context, req *TableName) (*IndexParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DropIndex(ctx context.Context, req *TableName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) CreatePartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowPartitions(ctx context.Context, req *TableName) (*PartitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedMilvusServiceServer) DropPartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) Insert(ctx context.Context, req *InsertParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorByID(ctx context.Context, req *VectorIdentity) (*VectorData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorIDs(ctx context.Context, req *GetVectorIDsParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) Search(ctx context.Context, req *SearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchByID(ctx context.Context, req *SearchByIDParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByID not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchInFiles(ctx context.Context, req *SearchInFilesParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInFiles not implemented")
}
func (*UnimplementedMilvusServiceServer) Cmd(ctx context.Context, req *Command) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteByID(ctx context.Context, req *DeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadTable(ctx context.Context, req *TableName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadTable not implemented")
}
func (*UnimplementedMilvusServiceServer) Flush(ctx context.Context, req *FlushParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedMilvusServiceServer) Compact(ctx context.Context, req *TableName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}

func RegisterMilvusServiceServer(s *grpc.Server, srv MilvusServiceServer) {
	s.RegisterService(&_MilvusService_serviceDesc, srv)
}

func _MilvusService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateTable(ctx, req.(*TableSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowTables(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowTableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowTableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowTableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowTableInfo(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorByID(ctx, req.(*VectorIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, req.(*GetVectorIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchByID(ctx, req.(*SearchByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchInFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInFilesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchInFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, req.(*SearchInFilesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Cmd(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteByID(ctx, req.(*DeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Compact(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilvusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.grpc.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _MilvusService_CreateTable_Handler,
		},
		{
			MethodName: "HasTable",
			Handler:    _MilvusService_HasTable_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _MilvusService_DescribeTable_Handler,
		},
		{
			MethodName: "CountTable",
			Handler:    _MilvusService_CountTable_Handler,
		},
		{
			MethodName: "ShowTables",
			Handler:    _MilvusService_ShowTables_Handler,
		},
		{
			MethodName: "ShowTableInfo",
			Handler:    _MilvusService_ShowTableInfo_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _MilvusService_DropTable_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "GetVectorByID",
			Handler:    _MilvusService_GetVectorByID_Handler,
		},
		{
			MethodName: "GetVectorIDs",
			Handler:    _MilvusService_GetVectorIDs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "SearchByID",
			Handler:    _MilvusService_SearchByID_Handler,
		},
		{
			MethodName: "SearchInFiles",
			Handler:    _MilvusService_SearchInFiles_Handler,
		},
		{
			MethodName: "Cmd",
			Handler:    _MilvusService_Cmd_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _MilvusService_DeleteByID_Handler,
		},
		{
			MethodName: "PreloadTable",
			Handler:    _MilvusService_PreloadTable_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _MilvusService_Compact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
