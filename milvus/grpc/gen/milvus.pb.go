// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: milvus.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_NULL    DataType = 0
	DataType_INT8    DataType = 1
	DataType_INT16   DataType = 2
	DataType_INT32   DataType = 3
	DataType_INT64   DataType = 4
	DataType_STRING  DataType = 20
	DataType_BOOL    DataType = 30
	DataType_FLOAT   DataType = 40
	DataType_DOUBLE  DataType = 41
	DataType_VECTOR  DataType = 100
	DataType_UNKNOWN DataType = 9999
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:    "NULL",
		1:    "INT8",
		2:    "INT16",
		3:    "INT32",
		4:    "INT64",
		20:   "STRING",
		30:   "BOOL",
		40:   "FLOAT",
		41:   "DOUBLE",
		100:  "VECTOR",
		9999: "UNKNOWN",
	}
	DataType_value = map[string]int32{
		"NULL":    0,
		"INT8":    1,
		"INT16":   2,
		"INT32":   3,
		"INT64":   4,
		"STRING":  20,
		"BOOL":    30,
		"FLOAT":   40,
		"DOUBLE":  41,
		"VECTOR":  100,
		"UNKNOWN": 9999,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_milvus_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_milvus_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{0}
}

type CompareOperator int32

const (
	CompareOperator_LT  CompareOperator = 0
	CompareOperator_LTE CompareOperator = 1
	CompareOperator_EQ  CompareOperator = 2
	CompareOperator_GT  CompareOperator = 3
	CompareOperator_GTE CompareOperator = 4
	CompareOperator_NE  CompareOperator = 5
)

// Enum value maps for CompareOperator.
var (
	CompareOperator_name = map[int32]string{
		0: "LT",
		1: "LTE",
		2: "EQ",
		3: "GT",
		4: "GTE",
		5: "NE",
	}
	CompareOperator_value = map[string]int32{
		"LT":  0,
		"LTE": 1,
		"EQ":  2,
		"GT":  3,
		"GTE": 4,
		"NE":  5,
	}
)

func (x CompareOperator) Enum() *CompareOperator {
	p := new(CompareOperator)
	*p = x
	return p
}

func (x CompareOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompareOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_milvus_proto_enumTypes[1].Descriptor()
}

func (CompareOperator) Type() protoreflect.EnumType {
	return &file_milvus_proto_enumTypes[1]
}

func (x CompareOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompareOperator.Descriptor instead.
func (CompareOperator) EnumDescriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{1}
}

type Occur int32

const (
	Occur_INVALID  Occur = 0
	Occur_MUST     Occur = 1
	Occur_SHOULD   Occur = 2
	Occur_MUST_NOT Occur = 3
)

// Enum value maps for Occur.
var (
	Occur_name = map[int32]string{
		0: "INVALID",
		1: "MUST",
		2: "SHOULD",
		3: "MUST_NOT",
	}
	Occur_value = map[string]int32{
		"INVALID":  0,
		"MUST":     1,
		"SHOULD":   2,
		"MUST_NOT": 3,
	}
)

func (x Occur) Enum() *Occur {
	p := new(Occur)
	*p = x
	return p
}

func (x Occur) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Occur) Descriptor() protoreflect.EnumDescriptor {
	return file_milvus_proto_enumTypes[2].Descriptor()
}

func (Occur) Type() protoreflect.EnumType {
	return &file_milvus_proto_enumTypes[2]
}

func (x Occur) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Occur.Descriptor instead.
func (Occur) EnumDescriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{2}
}

//*
// @brief general usage
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// @brief Collection name
type CollectionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
}

func (x *CollectionName) Reset() {
	*x = CollectionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionName) ProtoMessage() {}

func (x *CollectionName) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionName.ProtoReflect.Descriptor instead.
func (*CollectionName) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionName) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

//*
// @brief Collection name list
type CollectionNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionNames []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
}

func (x *CollectionNameList) Reset() {
	*x = CollectionNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionNameList) ProtoMessage() {}

func (x *CollectionNameList) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionNameList.ProtoReflect.Descriptor instead.
func (*CollectionNameList) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionNameList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionNameList) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

//*
// @brief Collection schema
// metric_type: 1-L2, 2-IP
type CollectionSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Dimension      int64           `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	IndexFileSize  int64           `protobuf:"varint,4,opt,name=index_file_size,json=indexFileSize,proto3" json:"index_file_size,omitempty"`
	MetricType     int32           `protobuf:"varint,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *CollectionSchema) Reset() {
	*x = CollectionSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionSchema) ProtoMessage() {}

func (x *CollectionSchema) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionSchema.ProtoReflect.Descriptor instead.
func (*CollectionSchema) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionSchema) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionSchema) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionSchema) GetDimension() int64 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *CollectionSchema) GetIndexFileSize() int64 {
	if x != nil {
		return x.IndexFileSize
	}
	return 0
}

func (x *CollectionSchema) GetMetricType() int32 {
	if x != nil {
		return x.MetricType
	}
	return 0
}

func (x *CollectionSchema) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Params of partition
type PartitionParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Tag            string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PartitionParam) Reset() {
	*x = PartitionParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionParam) ProtoMessage() {}

func (x *PartitionParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionParam.ProtoReflect.Descriptor instead.
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{4}
}

func (x *PartitionParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *PartitionParam) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
}

func (x *PartitionList) Reset() {
	*x = PartitionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionList) ProtoMessage() {}

func (x *PartitionList) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionList.ProtoReflect.Descriptor instead.
func (*PartitionList) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PartitionList) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

//*
// @brief Record inserted
type RowRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatData  []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"` //float vector data
	BinaryData []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`       //binary vector data
}

func (x *RowRecord) Reset() {
	*x = RowRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRecord) ProtoMessage() {}

func (x *RowRecord) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRecord.ProtoReflect.Descriptor instead.
func (*RowRecord) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{6}
}

func (x *RowRecord) GetFloatData() []float32 {
	if x != nil {
		return x.FloatData
	}
	return nil
}

func (x *RowRecord) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

//*
// @brief Params to be inserted
type InsertParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	RowRecordArray []*RowRecord    `protobuf:"bytes,2,rep,name=row_record_array,json=rowRecordArray,proto3" json:"row_record_array,omitempty"`
	RowIdArray     []int64         `protobuf:"varint,3,rep,packed,name=row_id_array,json=rowIdArray,proto3" json:"row_id_array,omitempty"` //optional
	PartitionTag   string          `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *InsertParam) Reset() {
	*x = InsertParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertParam) ProtoMessage() {}

func (x *InsertParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertParam.ProtoReflect.Descriptor instead.
func (*InsertParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{7}
}

func (x *InsertParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *InsertParam) GetRowRecordArray() []*RowRecord {
	if x != nil {
		return x.RowRecordArray
	}
	return nil
}

func (x *InsertParam) GetRowIdArray() []int64 {
	if x != nil {
		return x.RowIdArray
	}
	return nil
}

func (x *InsertParam) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *InsertParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Vector ids
type VectorIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorIdArray []int64 `protobuf:"varint,2,rep,packed,name=vector_id_array,json=vectorIdArray,proto3" json:"vector_id_array,omitempty"`
}

func (x *VectorIds) Reset() {
	*x = VectorIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorIds) ProtoMessage() {}

func (x *VectorIds) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorIds.ProtoReflect.Descriptor instead.
func (*VectorIds) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{8}
}

func (x *VectorIds) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VectorIds) GetVectorIdArray() []int64 {
	if x != nil {
		return x.VectorIdArray
	}
	return nil
}

//*
// @brief Params for searching vector
type SearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	QueryRecordArray  []*RowRecord    `protobuf:"bytes,3,rep,name=query_record_array,json=queryRecordArray,proto3" json:"query_record_array,omitempty"`
	Topk              int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams       []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *SearchParam) Reset() {
	*x = SearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParam) ProtoMessage() {}

func (x *SearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParam.ProtoReflect.Descriptor instead.
func (*SearchParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{9}
}

func (x *SearchParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchParam) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

func (x *SearchParam) GetQueryRecordArray() []*RowRecord {
	if x != nil {
		return x.QueryRecordArray
	}
	return nil
}

func (x *SearchParam) GetTopk() int64 {
	if x != nil {
		return x.Topk
	}
	return 0
}

func (x *SearchParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Params for searching vector in files
type SearchInFilesParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdArray []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
}

func (x *SearchInFilesParam) Reset() {
	*x = SearchInFilesParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInFilesParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInFilesParam) ProtoMessage() {}

func (x *SearchInFilesParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInFilesParam.ProtoReflect.Descriptor instead.
func (*SearchInFilesParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{10}
}

func (x *SearchInFilesParam) GetFileIdArray() []string {
	if x != nil {
		return x.FileIdArray
	}
	return nil
}

func (x *SearchInFilesParam) GetSearchParam() *SearchParam {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

//*
// @brief Params for searching vector by ID
type SearchByIDParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	IdArray           []int64         `protobuf:"varint,3,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	Topk              int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams       []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *SearchByIDParam) Reset() {
	*x = SearchByIDParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchByIDParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByIDParam) ProtoMessage() {}

func (x *SearchByIDParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByIDParam.ProtoReflect.Descriptor instead.
func (*SearchByIDParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{11}
}

func (x *SearchByIDParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchByIDParam) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

func (x *SearchByIDParam) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

func (x *SearchByIDParam) GetTopk() int64 {
	if x != nil {
		return x.Topk
	}
	return 0
}

func (x *SearchByIDParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Params for preload collection/partitions
type PreloadCollectionParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
}

func (x *PreloadCollectionParam) Reset() {
	*x = PreloadCollectionParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadCollectionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadCollectionParam) ProtoMessage() {}

func (x *PreloadCollectionParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadCollectionParam.ProtoReflect.Descriptor instead.
func (*PreloadCollectionParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{12}
}

func (x *PreloadCollectionParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *PreloadCollectionParam) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

//*
// @brief Params for reloading segments
type ReLoadSegmentsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentIdArray []string `protobuf:"bytes,2,rep,name=segment_id_array,json=segmentIdArray,proto3" json:"segment_id_array,omitempty"`
}

func (x *ReLoadSegmentsParam) Reset() {
	*x = ReLoadSegmentsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReLoadSegmentsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReLoadSegmentsParam) ProtoMessage() {}

func (x *ReLoadSegmentsParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReLoadSegmentsParam.ProtoReflect.Descriptor instead.
func (*ReLoadSegmentsParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{13}
}

func (x *ReLoadSegmentsParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ReLoadSegmentsParam) GetSegmentIdArray() []string {
	if x != nil {
		return x.SegmentIdArray
	}
	return nil
}

//*
// @brief Query result params
type TopKQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RowNum    int64     `protobuf:"varint,2,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Ids       []int64   `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Distances []float32 `protobuf:"fixed32,4,rep,packed,name=distances,proto3" json:"distances,omitempty"`
}

func (x *TopKQueryResult) Reset() {
	*x = TopKQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopKQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopKQueryResult) ProtoMessage() {}

func (x *TopKQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopKQueryResult.ProtoReflect.Descriptor instead.
func (*TopKQueryResult) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{14}
}

func (x *TopKQueryResult) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TopKQueryResult) GetRowNum() int64 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *TopKQueryResult) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TopKQueryResult) GetDistances() []float32 {
	if x != nil {
		return x.Distances
	}
	return nil
}

//*
// @brief Server string Reply
type StringReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply string  `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
}

func (x *StringReply) Reset() {
	*x = StringReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringReply) ProtoMessage() {}

func (x *StringReply) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringReply.ProtoReflect.Descriptor instead.
func (*StringReply) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{15}
}

func (x *StringReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StringReply) GetStringReply() string {
	if x != nil {
		return x.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply bool    `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{16}
}

func (x *BoolReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BoolReply) GetBoolReply() bool {
	if x != nil {
		return x.BoolReply
	}
	return false
}

//*
// @brief Return collection row count
type CollectionRowCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionRowCount int64   `protobuf:"varint,2,opt,name=collection_row_count,json=collectionRowCount,proto3" json:"collection_row_count,omitempty"`
}

func (x *CollectionRowCount) Reset() {
	*x = CollectionRowCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRowCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRowCount) ProtoMessage() {}

func (x *CollectionRowCount) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRowCount.ProtoReflect.Descriptor instead.
func (*CollectionRowCount) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{17}
}

func (x *CollectionRowCount) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionRowCount) GetCollectionRowCount() int64 {
	if x != nil {
		return x.CollectionRowCount
	}
	return 0
}

//*
// @brief Give server Command
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{18}
}

func (x *Command) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

//*
// @brief Index params
// @index_type: 0-invalid, 1-idmap, 2-ivflat, 3-ivfsq8, 4-nsgmix
type IndexParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IndexType      int32           `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *IndexParam) Reset() {
	*x = IndexParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexParam) ProtoMessage() {}

func (x *IndexParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexParam.ProtoReflect.Descriptor instead.
func (*IndexParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{19}
}

func (x *IndexParam) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IndexParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *IndexParam) GetIndexType() int32 {
	if x != nil {
		return x.IndexType
	}
	return 0
}

func (x *IndexParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

//*
// @brief Flush params
type FlushParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionNameArray []string `protobuf:"bytes,1,rep,name=collection_name_array,json=collectionNameArray,proto3" json:"collection_name_array,omitempty"`
}

func (x *FlushParam) Reset() {
	*x = FlushParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushParam) ProtoMessage() {}

func (x *FlushParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushParam.ProtoReflect.Descriptor instead.
func (*FlushParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{20}
}

func (x *FlushParam) GetCollectionNameArray() []string {
	if x != nil {
		return x.CollectionNameArray
	}
	return nil
}

//*
// @brief Flush params
type DeleteByIDParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTag   string  `protobuf:"bytes,3,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	IdArray        []int64 `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
}

func (x *DeleteByIDParam) Reset() {
	*x = DeleteByIDParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDParam) ProtoMessage() {}

func (x *DeleteByIDParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDParam.ProtoReflect.Descriptor instead.
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteByIDParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteByIDParam) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *DeleteByIDParam) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

//*
// @brief collection information
type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JsonInfo string  `protobuf:"bytes,2,opt,name=json_info,json=jsonInfo,proto3" json:"json_info,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{22}
}

func (x *CollectionInfo) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CollectionInfo) GetJsonInfo() string {
	if x != nil {
		return x.JsonInfo
	}
	return ""
}

//*
// @brief vectors identity
type VectorsIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTag   string  `protobuf:"bytes,3,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	IdArray        []int64 `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
}

func (x *VectorsIdentity) Reset() {
	*x = VectorsIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorsIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorsIdentity) ProtoMessage() {}

func (x *VectorsIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorsIdentity.ProtoReflect.Descriptor instead.
func (*VectorsIdentity) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{23}
}

func (x *VectorsIdentity) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *VectorsIdentity) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *VectorsIdentity) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

//*
// @brief vector data
type VectorsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorsData []*RowRecord `protobuf:"bytes,2,rep,name=vectors_data,json=vectorsData,proto3" json:"vectors_data,omitempty"`
}

func (x *VectorsData) Reset() {
	*x = VectorsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorsData) ProtoMessage() {}

func (x *VectorsData) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorsData.ProtoReflect.Descriptor instead.
func (*VectorsData) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{24}
}

func (x *VectorsData) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VectorsData) GetVectorsData() []*RowRecord {
	if x != nil {
		return x.VectorsData
	}
	return nil
}

//*
// @brief get vector ids from a segment parameters
type GetVectorIDsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentName    string `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
}

func (x *GetVectorIDsParam) Reset() {
	*x = GetVectorIDsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorIDsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorIDsParam) ProtoMessage() {}

func (x *GetVectorIDsParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorIDsParam.ProtoReflect.Descriptor instead.
func (*GetVectorIDsParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{25}
}

func (x *GetVectorIDsParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetVectorIDsParam) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

type VectorFieldParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension int64 `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *VectorFieldParam) Reset() {
	*x = VectorFieldParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFieldParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFieldParam) ProtoMessage() {}

func (x *VectorFieldParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFieldParam.ProtoReflect.Descriptor instead.
func (*VectorFieldParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{26}
}

func (x *VectorFieldParam) GetDimension() int64 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

type FieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FieldType_DataType
	//	*FieldType_VectorParam
	Value isFieldType_Value `protobuf_oneof:"value"`
}

func (x *FieldType) Reset() {
	*x = FieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldType) ProtoMessage() {}

func (x *FieldType) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldType.ProtoReflect.Descriptor instead.
func (*FieldType) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{27}
}

func (m *FieldType) GetValue() isFieldType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FieldType) GetDataType() DataType {
	if x, ok := x.GetValue().(*FieldType_DataType); ok {
		return x.DataType
	}
	return DataType_NULL
}

func (x *FieldType) GetVectorParam() *VectorFieldParam {
	if x, ok := x.GetValue().(*FieldType_VectorParam); ok {
		return x.VectorParam
	}
	return nil
}

type isFieldType_Value interface {
	isFieldType_Value()
}

type FieldType_DataType struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=milvus.grpc.DataType,oneof"`
}

type FieldType_VectorParam struct {
	VectorParam *VectorFieldParam `protobuf:"bytes,2,opt,name=vector_param,json=vectorParam,proto3,oneof"`
}

func (*FieldType_DataType) isFieldType_Value() {}

func (*FieldType_VectorParam) isFieldType_Value() {}

type FieldParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        *FieldType      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *FieldParam) Reset() {
	*x = FieldParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldParam) ProtoMessage() {}

func (x *FieldParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldParam.ProtoReflect.Descriptor instead.
func (*FieldParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{28}
}

func (x *FieldParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FieldParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldParam) GetType() *FieldType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type VectorFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*RowRecord `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *VectorFieldValue) Reset() {
	*x = VectorFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFieldValue) ProtoMessage() {}

func (x *VectorFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFieldValue.ProtoReflect.Descriptor instead.
func (*VectorFieldValue) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{29}
}

func (x *VectorFieldValue) GetValue() []*RowRecord {
	if x != nil {
		return x.Value
	}
	return nil
}

type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FieldValue_Int32Value
	//	*FieldValue_Int64Value
	//	*FieldValue_FloatValue
	//	*FieldValue_DoubleValue
	//	*FieldValue_StringValue
	//	*FieldValue_BoolValue
	//	*FieldValue_VectorValue
	Value isFieldValue_Value `protobuf_oneof:"value"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{30}
}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FieldValue) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*FieldValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *FieldValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*FieldValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *FieldValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*FieldValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *FieldValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*FieldValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *FieldValue) GetStringValue() string {
	if x, ok := x.GetValue().(*FieldValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *FieldValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*FieldValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *FieldValue) GetVectorValue() *VectorFieldValue {
	if x, ok := x.GetValue().(*FieldValue_VectorValue); ok {
		return x.VectorValue
	}
	return nil
}

type isFieldValue_Value interface {
	isFieldValue_Value()
}

type FieldValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type FieldValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type FieldValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type FieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type FieldValue_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type FieldValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type FieldValue_VectorValue struct {
	VectorValue *VectorFieldValue `protobuf:"bytes,7,opt,name=vector_value,json=vectorValue,proto3,oneof"`
}

func (*FieldValue_Int32Value) isFieldValue_Value() {}

func (*FieldValue_Int64Value) isFieldValue_Value() {}

func (*FieldValue_FloatValue) isFieldValue_Value() {}

func (*FieldValue_DoubleValue) isFieldValue_Value() {}

func (*FieldValue_StringValue) isFieldValue_Value() {}

func (*FieldValue_BoolValue) isFieldValue_Value() {}

func (*FieldValue_VectorValue) isFieldValue_Value() {}

type Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionId   uint64        `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName string        `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Fields         []*FieldParam `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Mapping) Reset() {
	*x = Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapping) ProtoMessage() {}

func (x *Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapping.ProtoReflect.Descriptor instead.
func (*Mapping) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{31}
}

func (x *Mapping) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Mapping) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *Mapping) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *Mapping) GetFields() []*FieldParam {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MappingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MappingList []*Mapping `protobuf:"bytes,2,rep,name=mapping_list,json=mappingList,proto3" json:"mapping_list,omitempty"`
}

func (x *MappingList) Reset() {
	*x = MappingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingList) ProtoMessage() {}

func (x *MappingList) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingList.ProtoReflect.Descriptor instead.
func (*MappingList) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{32}
}

func (x *MappingList) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MappingList) GetMappingList() []*Mapping {
	if x != nil {
		return x.MappingList
	}
	return nil
}

type TermQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Values      []byte          `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	ValueNum    int64           `protobuf:"varint,3,opt,name=value_num,json=valueNum,proto3" json:"value_num,omitempty"`
	Boost       float32         `protobuf:"fixed32,4,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *TermQuery) Reset() {
	*x = TermQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQuery) ProtoMessage() {}

func (x *TermQuery) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQuery.ProtoReflect.Descriptor instead.
func (*TermQuery) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{33}
}

func (x *TermQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *TermQuery) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TermQuery) GetValueNum() int64 {
	if x != nil {
		return x.ValueNum
	}
	return 0
}

func (x *TermQuery) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *TermQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type CompareExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator CompareOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=milvus.grpc.CompareOperator" json:"operator,omitempty"`
	Operand  string          `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *CompareExpr) Reset() {
	*x = CompareExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareExpr) ProtoMessage() {}

func (x *CompareExpr) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareExpr.ProtoReflect.Descriptor instead.
func (*CompareExpr) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{34}
}

func (x *CompareExpr) GetOperator() CompareOperator {
	if x != nil {
		return x.Operator
	}
	return CompareOperator_LT
}

func (x *CompareExpr) GetOperand() string {
	if x != nil {
		return x.Operand
	}
	return ""
}

type RangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Operand     []*CompareExpr  `protobuf:"bytes,2,rep,name=operand,proto3" json:"operand,omitempty"`
	Boost       float32         `protobuf:"fixed32,3,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *RangeQuery) Reset() {
	*x = RangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeQuery) ProtoMessage() {}

func (x *RangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeQuery.ProtoReflect.Descriptor instead.
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{35}
}

func (x *RangeQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *RangeQuery) GetOperand() []*CompareExpr {
	if x != nil {
		return x.Operand
	}
	return nil
}

func (x *RangeQuery) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *RangeQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type VectorQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	QueryBoost  float32         `protobuf:"fixed32,2,opt,name=query_boost,json=queryBoost,proto3" json:"query_boost,omitempty"`
	Records     []*RowRecord    `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	Topk        int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *VectorQuery) Reset() {
	*x = VectorQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQuery) ProtoMessage() {}

func (x *VectorQuery) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQuery.ProtoReflect.Descriptor instead.
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{36}
}

func (x *VectorQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *VectorQuery) GetQueryBoost() float32 {
	if x != nil {
		return x.QueryBoost
	}
	return 0
}

func (x *VectorQuery) GetRecords() []*RowRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *VectorQuery) GetTopk() int64 {
	if x != nil {
		return x.Topk
	}
	return 0
}

func (x *VectorQuery) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occur        Occur           `protobuf:"varint,1,opt,name=occur,proto3,enum=milvus.grpc.Occur" json:"occur,omitempty"`
	GeneralQuery []*GeneralQuery `protobuf:"bytes,2,rep,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{37}
}

func (x *BooleanQuery) GetOccur() Occur {
	if x != nil {
		return x.Occur
	}
	return Occur_INVALID
}

func (x *BooleanQuery) GetGeneralQuery() []*GeneralQuery {
	if x != nil {
		return x.GeneralQuery
	}
	return nil
}

type GeneralQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*GeneralQuery_BooleanQuery
	//	*GeneralQuery_TermQuery
	//	*GeneralQuery_RangeQuery
	//	*GeneralQuery_VectorQuery
	Query isGeneralQuery_Query `protobuf_oneof:"query"`
}

func (x *GeneralQuery) Reset() {
	*x = GeneralQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralQuery) ProtoMessage() {}

func (x *GeneralQuery) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralQuery.ProtoReflect.Descriptor instead.
func (*GeneralQuery) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{38}
}

func (m *GeneralQuery) GetQuery() isGeneralQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GeneralQuery) GetBooleanQuery() *BooleanQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (x *GeneralQuery) GetTermQuery() *TermQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (x *GeneralQuery) GetRangeQuery() *RangeQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

func (x *GeneralQuery) GetVectorQuery() *VectorQuery {
	if x, ok := x.GetQuery().(*GeneralQuery_VectorQuery); ok {
		return x.VectorQuery
	}
	return nil
}

type isGeneralQuery_Query interface {
	isGeneralQuery_Query()
}

type GeneralQuery_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,1,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

type GeneralQuery_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,2,opt,name=term_query,json=termQuery,proto3,oneof"`
}

type GeneralQuery_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,3,opt,name=range_query,json=rangeQuery,proto3,oneof"`
}

type GeneralQuery_VectorQuery struct {
	VectorQuery *VectorQuery `protobuf:"bytes,4,opt,name=vector_query,json=vectorQuery,proto3,oneof"`
}

func (*GeneralQuery_BooleanQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_TermQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_RangeQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_VectorQuery) isGeneralQuery_Query() {}

type HSearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	GeneralQuery      *GeneralQuery   `protobuf:"bytes,3,opt,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	ExtraParams       []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *HSearchParam) Reset() {
	*x = HSearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSearchParam) ProtoMessage() {}

func (x *HSearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSearchParam.ProtoReflect.Descriptor instead.
func (*HSearchParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{39}
}

func (x *HSearchParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HSearchParam) GetPartitionTagArray() []string {
	if x != nil {
		return x.PartitionTagArray
	}
	return nil
}

func (x *HSearchParam) GetGeneralQuery() *GeneralQuery {
	if x != nil {
		return x.GeneralQuery
	}
	return nil
}

func (x *HSearchParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type HSearchInSegmentsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentIdArray []string      `protobuf:"bytes,1,rep,name=segment_id_array,json=segmentIdArray,proto3" json:"segment_id_array,omitempty"`
	SearchParam    *HSearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
}

func (x *HSearchInSegmentsParam) Reset() {
	*x = HSearchInSegmentsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSearchInSegmentsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSearchInSegmentsParam) ProtoMessage() {}

func (x *HSearchInSegmentsParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSearchInSegmentsParam.ProtoReflect.Descriptor instead.
func (*HSearchInSegmentsParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{40}
}

func (x *HSearchInSegmentsParam) GetSegmentIdArray() []string {
	if x != nil {
		return x.SegmentIdArray
	}
	return nil
}

func (x *HSearchInSegmentsParam) GetSearchParam() *HSearchParam {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

type AttrRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *AttrRecord) Reset() {
	*x = AttrRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrRecord) ProtoMessage() {}

func (x *AttrRecord) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrRecord.ProtoReflect.Descriptor instead.
func (*AttrRecord) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{41}
}

func (x *AttrRecord) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type HEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityId     int64         `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	FieldNames   []string      `protobuf:"bytes,3,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	AttrRecords  []byte        `protobuf:"bytes,4,opt,name=attr_records,json=attrRecords,proto3" json:"attr_records,omitempty"`
	RowNum       int64         `protobuf:"varint,5,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	ResultValues []*FieldValue `protobuf:"bytes,6,rep,name=result_values,json=resultValues,proto3" json:"result_values,omitempty"`
}

func (x *HEntity) Reset() {
	*x = HEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HEntity) ProtoMessage() {}

func (x *HEntity) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HEntity.ProtoReflect.Descriptor instead.
func (*HEntity) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{42}
}

func (x *HEntity) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HEntity) GetEntityId() int64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *HEntity) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *HEntity) GetAttrRecords() []byte {
	if x != nil {
		return x.AttrRecords
	}
	return nil
}

func (x *HEntity) GetRowNum() int64 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *HEntity) GetResultValues() []*FieldValue {
	if x != nil {
		return x.ResultValues
	}
	return nil
}

type HQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entities []*HEntity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	RowNum   int64      `protobuf:"varint,3,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Score    []float32  `protobuf:"fixed32,4,rep,packed,name=score,proto3" json:"score,omitempty"`
	Distance []float32  `protobuf:"fixed32,5,rep,packed,name=distance,proto3" json:"distance,omitempty"`
}

func (x *HQueryResult) Reset() {
	*x = HQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HQueryResult) ProtoMessage() {}

func (x *HQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HQueryResult.ProtoReflect.Descriptor instead.
func (*HQueryResult) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{43}
}

func (x *HQueryResult) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HQueryResult) GetEntities() []*HEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *HQueryResult) GetRowNum() int64 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *HQueryResult) GetScore() []float32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *HQueryResult) GetDistance() []float32 {
	if x != nil {
		return x.Distance
	}
	return nil
}

type HInsertParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTag   string          `protobuf:"bytes,2,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Entities       *HEntity        `protobuf:"bytes,3,opt,name=entities,proto3" json:"entities,omitempty"`
	EntityIdArray  []int64         `protobuf:"varint,4,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *HInsertParam) Reset() {
	*x = HInsertParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HInsertParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HInsertParam) ProtoMessage() {}

func (x *HInsertParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HInsertParam.ProtoReflect.Descriptor instead.
func (*HInsertParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{44}
}

func (x *HInsertParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HInsertParam) GetPartitionTag() string {
	if x != nil {
		return x.PartitionTag
	}
	return ""
}

func (x *HInsertParam) GetEntities() *HEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *HInsertParam) GetEntityIdArray() []int64 {
	if x != nil {
		return x.EntityIdArray
	}
	return nil
}

func (x *HInsertParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

type HEntityIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Id             int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HEntityIdentity) Reset() {
	*x = HEntityIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HEntityIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HEntityIdentity) ProtoMessage() {}

func (x *HEntityIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HEntityIdentity.ProtoReflect.Descriptor instead.
func (*HEntityIdentity) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{45}
}

func (x *HEntityIdentity) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HEntityIdentity) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HEntityIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityIdArray []int64 `protobuf:"varint,2,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
}

func (x *HEntityIDs) Reset() {
	*x = HEntityIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HEntityIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HEntityIDs) ProtoMessage() {}

func (x *HEntityIDs) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HEntityIDs.ProtoReflect.Descriptor instead.
func (*HEntityIDs) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{46}
}

func (x *HEntityIDs) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HEntityIDs) GetEntityIdArray() []int64 {
	if x != nil {
		return x.EntityIdArray
	}
	return nil
}

type HGetEntityIDsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentName    string `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
}

func (x *HGetEntityIDsParam) Reset() {
	*x = HGetEntityIDsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HGetEntityIDsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HGetEntityIDsParam) ProtoMessage() {}

func (x *HGetEntityIDsParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HGetEntityIDsParam.ProtoReflect.Descriptor instead.
func (*HGetEntityIDsParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{47}
}

func (x *HGetEntityIDsParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HGetEntityIDsParam) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

type HDeleteByIDParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray        []int64 `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
}

func (x *HDeleteByIDParam) Reset() {
	*x = HDeleteByIDParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDeleteByIDParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDeleteByIDParam) ProtoMessage() {}

func (x *HDeleteByIDParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDeleteByIDParam.ProtoReflect.Descriptor instead.
func (*HDeleteByIDParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{48}
}

func (x *HDeleteByIDParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HDeleteByIDParam) GetIdArray() []int64 {
	if x != nil {
		return x.IdArray
	}
	return nil
}

type HIndexParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IndexType      int32           `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	ExtraParams    []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
}

func (x *HIndexParam) Reset() {
	*x = HIndexParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_milvus_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HIndexParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HIndexParam) ProtoMessage() {}

func (x *HIndexParam) ProtoReflect() protoreflect.Message {
	mi := &file_milvus_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HIndexParam.ProtoReflect.Descriptor instead.
func (*HIndexParam) Descriptor() ([]byte, []int) {
	return file_milvus_proto_rawDescGZIP(), []int{49}
}

func (x *HIndexParam) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HIndexParam) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HIndexParam) GetIndexType() int32 {
	if x != nil {
		return x.IndexType
	}
	return 0
}

func (x *HIndexParam) GetExtraParams() []*KeyValuePair {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

var File_milvus_proto protoreflect.FileDescriptor

var file_milvus_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x39, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x12,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x6c, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x4b, 0x0a, 0x09, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x72,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x72,
	0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x60, 0x0a, 0x09, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x22, 0xfe, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x44, 0x0a,
	0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xd7, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5d, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x57, 0x0a, 0x09,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x7a, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x75, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x0a, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x07, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x73, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x0c, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x52, 0x05, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3a, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x48, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x16,
	0x48, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x22,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x07, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x48, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf4,
	0x01, 0x0a, 0x0c, 0x48, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4a, 0x0a, 0x0f, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x61, 0x0a, 0x0a, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x22, 0x60, 0x0a, 0x12, 0x48, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x48, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xc0,
	0x01, 0x0a, 0x0b, 0x48, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x29,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x64, 0x12, 0x0c, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x8f, 0x4e, 0x2a, 0x43, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x45, 0x51, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x05, 0x2a,
	0x38, 0x0a, 0x05, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x55, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x32, 0xf8, 0x17, 0x0a, 0x0d, 0x4d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x14,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x13, 0x48, 0x61, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x14, 0x44, 0x72, 0x6f, 0x70, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x18, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x48, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x70, 0x4b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x48, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1f, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x17, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1d,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_milvus_proto_rawDescOnce sync.Once
	file_milvus_proto_rawDescData = file_milvus_proto_rawDesc
)

func file_milvus_proto_rawDescGZIP() []byte {
	file_milvus_proto_rawDescOnce.Do(func() {
		file_milvus_proto_rawDescData = protoimpl.X.CompressGZIP(file_milvus_proto_rawDescData)
	})
	return file_milvus_proto_rawDescData
}

var file_milvus_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_milvus_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_milvus_proto_goTypes = []interface{}{
	(DataType)(0),                  // 0: milvus.grpc.DataType
	(CompareOperator)(0),           // 1: milvus.grpc.CompareOperator
	(Occur)(0),                     // 2: milvus.grpc.Occur
	(*KeyValuePair)(nil),           // 3: milvus.grpc.KeyValuePair
	(*CollectionName)(nil),         // 4: milvus.grpc.CollectionName
	(*CollectionNameList)(nil),     // 5: milvus.grpc.CollectionNameList
	(*CollectionSchema)(nil),       // 6: milvus.grpc.CollectionSchema
	(*PartitionParam)(nil),         // 7: milvus.grpc.PartitionParam
	(*PartitionList)(nil),          // 8: milvus.grpc.PartitionList
	(*RowRecord)(nil),              // 9: milvus.grpc.RowRecord
	(*InsertParam)(nil),            // 10: milvus.grpc.InsertParam
	(*VectorIds)(nil),              // 11: milvus.grpc.VectorIds
	(*SearchParam)(nil),            // 12: milvus.grpc.SearchParam
	(*SearchInFilesParam)(nil),     // 13: milvus.grpc.SearchInFilesParam
	(*SearchByIDParam)(nil),        // 14: milvus.grpc.SearchByIDParam
	(*PreloadCollectionParam)(nil), // 15: milvus.grpc.PreloadCollectionParam
	(*ReLoadSegmentsParam)(nil),    // 16: milvus.grpc.ReLoadSegmentsParam
	(*TopKQueryResult)(nil),        // 17: milvus.grpc.TopKQueryResult
	(*StringReply)(nil),            // 18: milvus.grpc.StringReply
	(*BoolReply)(nil),              // 19: milvus.grpc.BoolReply
	(*CollectionRowCount)(nil),     // 20: milvus.grpc.CollectionRowCount
	(*Command)(nil),                // 21: milvus.grpc.Command
	(*IndexParam)(nil),             // 22: milvus.grpc.IndexParam
	(*FlushParam)(nil),             // 23: milvus.grpc.FlushParam
	(*DeleteByIDParam)(nil),        // 24: milvus.grpc.DeleteByIDParam
	(*CollectionInfo)(nil),         // 25: milvus.grpc.CollectionInfo
	(*VectorsIdentity)(nil),        // 26: milvus.grpc.VectorsIdentity
	(*VectorsData)(nil),            // 27: milvus.grpc.VectorsData
	(*GetVectorIDsParam)(nil),      // 28: milvus.grpc.GetVectorIDsParam
	(*VectorFieldParam)(nil),       // 29: milvus.grpc.VectorFieldParam
	(*FieldType)(nil),              // 30: milvus.grpc.FieldType
	(*FieldParam)(nil),             // 31: milvus.grpc.FieldParam
	(*VectorFieldValue)(nil),       // 32: milvus.grpc.VectorFieldValue
	(*FieldValue)(nil),             // 33: milvus.grpc.FieldValue
	(*Mapping)(nil),                // 34: milvus.grpc.Mapping
	(*MappingList)(nil),            // 35: milvus.grpc.MappingList
	(*TermQuery)(nil),              // 36: milvus.grpc.TermQuery
	(*CompareExpr)(nil),            // 37: milvus.grpc.CompareExpr
	(*RangeQuery)(nil),             // 38: milvus.grpc.RangeQuery
	(*VectorQuery)(nil),            // 39: milvus.grpc.VectorQuery
	(*BooleanQuery)(nil),           // 40: milvus.grpc.BooleanQuery
	(*GeneralQuery)(nil),           // 41: milvus.grpc.GeneralQuery
	(*HSearchParam)(nil),           // 42: milvus.grpc.HSearchParam
	(*HSearchInSegmentsParam)(nil), // 43: milvus.grpc.HSearchInSegmentsParam
	(*AttrRecord)(nil),             // 44: milvus.grpc.AttrRecord
	(*HEntity)(nil),                // 45: milvus.grpc.HEntity
	(*HQueryResult)(nil),           // 46: milvus.grpc.HQueryResult
	(*HInsertParam)(nil),           // 47: milvus.grpc.HInsertParam
	(*HEntityIdentity)(nil),        // 48: milvus.grpc.HEntityIdentity
	(*HEntityIDs)(nil),             // 49: milvus.grpc.HEntityIDs
	(*HGetEntityIDsParam)(nil),     // 50: milvus.grpc.HGetEntityIDsParam
	(*HDeleteByIDParam)(nil),       // 51: milvus.grpc.HDeleteByIDParam
	(*HIndexParam)(nil),            // 52: milvus.grpc.HIndexParam
	(*Status)(nil),                 // 53: milvus.grpc.Status
}
var file_milvus_proto_depIdxs = []int32{
	53, // 0: milvus.grpc.CollectionNameList.status:type_name -> milvus.grpc.Status
	53, // 1: milvus.grpc.CollectionSchema.status:type_name -> milvus.grpc.Status
	3,  // 2: milvus.grpc.CollectionSchema.extra_params:type_name -> milvus.grpc.KeyValuePair
	53, // 3: milvus.grpc.PartitionList.status:type_name -> milvus.grpc.Status
	9,  // 4: milvus.grpc.InsertParam.row_record_array:type_name -> milvus.grpc.RowRecord
	3,  // 5: milvus.grpc.InsertParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	53, // 6: milvus.grpc.VectorIds.status:type_name -> milvus.grpc.Status
	9,  // 7: milvus.grpc.SearchParam.query_record_array:type_name -> milvus.grpc.RowRecord
	3,  // 8: milvus.grpc.SearchParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	12, // 9: milvus.grpc.SearchInFilesParam.search_param:type_name -> milvus.grpc.SearchParam
	3,  // 10: milvus.grpc.SearchByIDParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	53, // 11: milvus.grpc.TopKQueryResult.status:type_name -> milvus.grpc.Status
	53, // 12: milvus.grpc.StringReply.status:type_name -> milvus.grpc.Status
	53, // 13: milvus.grpc.BoolReply.status:type_name -> milvus.grpc.Status
	53, // 14: milvus.grpc.CollectionRowCount.status:type_name -> milvus.grpc.Status
	53, // 15: milvus.grpc.IndexParam.status:type_name -> milvus.grpc.Status
	3,  // 16: milvus.grpc.IndexParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	53, // 17: milvus.grpc.CollectionInfo.status:type_name -> milvus.grpc.Status
	53, // 18: milvus.grpc.VectorsData.status:type_name -> milvus.grpc.Status
	9,  // 19: milvus.grpc.VectorsData.vectors_data:type_name -> milvus.grpc.RowRecord
	0,  // 20: milvus.grpc.FieldType.data_type:type_name -> milvus.grpc.DataType
	29, // 21: milvus.grpc.FieldType.vector_param:type_name -> milvus.grpc.VectorFieldParam
	30, // 22: milvus.grpc.FieldParam.type:type_name -> milvus.grpc.FieldType
	3,  // 23: milvus.grpc.FieldParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	9,  // 24: milvus.grpc.VectorFieldValue.value:type_name -> milvus.grpc.RowRecord
	32, // 25: milvus.grpc.FieldValue.vector_value:type_name -> milvus.grpc.VectorFieldValue
	53, // 26: milvus.grpc.Mapping.status:type_name -> milvus.grpc.Status
	31, // 27: milvus.grpc.Mapping.fields:type_name -> milvus.grpc.FieldParam
	53, // 28: milvus.grpc.MappingList.status:type_name -> milvus.grpc.Status
	34, // 29: milvus.grpc.MappingList.mapping_list:type_name -> milvus.grpc.Mapping
	3,  // 30: milvus.grpc.TermQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	1,  // 31: milvus.grpc.CompareExpr.operator:type_name -> milvus.grpc.CompareOperator
	37, // 32: milvus.grpc.RangeQuery.operand:type_name -> milvus.grpc.CompareExpr
	3,  // 33: milvus.grpc.RangeQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	9,  // 34: milvus.grpc.VectorQuery.records:type_name -> milvus.grpc.RowRecord
	3,  // 35: milvus.grpc.VectorQuery.extra_params:type_name -> milvus.grpc.KeyValuePair
	2,  // 36: milvus.grpc.BooleanQuery.occur:type_name -> milvus.grpc.Occur
	41, // 37: milvus.grpc.BooleanQuery.general_query:type_name -> milvus.grpc.GeneralQuery
	40, // 38: milvus.grpc.GeneralQuery.boolean_query:type_name -> milvus.grpc.BooleanQuery
	36, // 39: milvus.grpc.GeneralQuery.term_query:type_name -> milvus.grpc.TermQuery
	38, // 40: milvus.grpc.GeneralQuery.range_query:type_name -> milvus.grpc.RangeQuery
	39, // 41: milvus.grpc.GeneralQuery.vector_query:type_name -> milvus.grpc.VectorQuery
	41, // 42: milvus.grpc.HSearchParam.general_query:type_name -> milvus.grpc.GeneralQuery
	3,  // 43: milvus.grpc.HSearchParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	42, // 44: milvus.grpc.HSearchInSegmentsParam.search_param:type_name -> milvus.grpc.HSearchParam
	53, // 45: milvus.grpc.HEntity.status:type_name -> milvus.grpc.Status
	33, // 46: milvus.grpc.HEntity.result_values:type_name -> milvus.grpc.FieldValue
	53, // 47: milvus.grpc.HQueryResult.status:type_name -> milvus.grpc.Status
	45, // 48: milvus.grpc.HQueryResult.entities:type_name -> milvus.grpc.HEntity
	45, // 49: milvus.grpc.HInsertParam.entities:type_name -> milvus.grpc.HEntity
	3,  // 50: milvus.grpc.HInsertParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	53, // 51: milvus.grpc.HEntityIDs.status:type_name -> milvus.grpc.Status
	53, // 52: milvus.grpc.HIndexParam.status:type_name -> milvus.grpc.Status
	3,  // 53: milvus.grpc.HIndexParam.extra_params:type_name -> milvus.grpc.KeyValuePair
	6,  // 54: milvus.grpc.MilvusService.CreateCollection:input_type -> milvus.grpc.CollectionSchema
	4,  // 55: milvus.grpc.MilvusService.HasCollection:input_type -> milvus.grpc.CollectionName
	4,  // 56: milvus.grpc.MilvusService.DescribeCollection:input_type -> milvus.grpc.CollectionName
	4,  // 57: milvus.grpc.MilvusService.CountCollection:input_type -> milvus.grpc.CollectionName
	21, // 58: milvus.grpc.MilvusService.ShowCollections:input_type -> milvus.grpc.Command
	4,  // 59: milvus.grpc.MilvusService.ShowCollectionInfo:input_type -> milvus.grpc.CollectionName
	4,  // 60: milvus.grpc.MilvusService.DropCollection:input_type -> milvus.grpc.CollectionName
	22, // 61: milvus.grpc.MilvusService.CreateIndex:input_type -> milvus.grpc.IndexParam
	4,  // 62: milvus.grpc.MilvusService.DescribeIndex:input_type -> milvus.grpc.CollectionName
	4,  // 63: milvus.grpc.MilvusService.DropIndex:input_type -> milvus.grpc.CollectionName
	7,  // 64: milvus.grpc.MilvusService.CreatePartition:input_type -> milvus.grpc.PartitionParam
	7,  // 65: milvus.grpc.MilvusService.HasPartition:input_type -> milvus.grpc.PartitionParam
	4,  // 66: milvus.grpc.MilvusService.ShowPartitions:input_type -> milvus.grpc.CollectionName
	7,  // 67: milvus.grpc.MilvusService.DropPartition:input_type -> milvus.grpc.PartitionParam
	10, // 68: milvus.grpc.MilvusService.Insert:input_type -> milvus.grpc.InsertParam
	26, // 69: milvus.grpc.MilvusService.GetVectorsByID:input_type -> milvus.grpc.VectorsIdentity
	28, // 70: milvus.grpc.MilvusService.GetVectorIDs:input_type -> milvus.grpc.GetVectorIDsParam
	12, // 71: milvus.grpc.MilvusService.Search:input_type -> milvus.grpc.SearchParam
	14, // 72: milvus.grpc.MilvusService.SearchByID:input_type -> milvus.grpc.SearchByIDParam
	13, // 73: milvus.grpc.MilvusService.SearchInFiles:input_type -> milvus.grpc.SearchInFilesParam
	21, // 74: milvus.grpc.MilvusService.Cmd:input_type -> milvus.grpc.Command
	24, // 75: milvus.grpc.MilvusService.DeleteByID:input_type -> milvus.grpc.DeleteByIDParam
	15, // 76: milvus.grpc.MilvusService.PreloadCollection:input_type -> milvus.grpc.PreloadCollectionParam
	15, // 77: milvus.grpc.MilvusService.ReleaseCollection:input_type -> milvus.grpc.PreloadCollectionParam
	16, // 78: milvus.grpc.MilvusService.ReloadSegments:input_type -> milvus.grpc.ReLoadSegmentsParam
	23, // 79: milvus.grpc.MilvusService.Flush:input_type -> milvus.grpc.FlushParam
	4,  // 80: milvus.grpc.MilvusService.Compact:input_type -> milvus.grpc.CollectionName
	34, // 81: milvus.grpc.MilvusService.CreateHybridCollection:input_type -> milvus.grpc.Mapping
	4,  // 82: milvus.grpc.MilvusService.HasHybridCollection:input_type -> milvus.grpc.CollectionName
	4,  // 83: milvus.grpc.MilvusService.DropHybridCollection:input_type -> milvus.grpc.CollectionName
	4,  // 84: milvus.grpc.MilvusService.DescribeHybridCollection:input_type -> milvus.grpc.CollectionName
	4,  // 85: milvus.grpc.MilvusService.CountHybridCollection:input_type -> milvus.grpc.CollectionName
	21, // 86: milvus.grpc.MilvusService.ShowHybridCollections:input_type -> milvus.grpc.Command
	4,  // 87: milvus.grpc.MilvusService.ShowHybridCollectionInfo:input_type -> milvus.grpc.CollectionName
	4,  // 88: milvus.grpc.MilvusService.PreloadHybridCollection:input_type -> milvus.grpc.CollectionName
	47, // 89: milvus.grpc.MilvusService.InsertEntity:input_type -> milvus.grpc.HInsertParam
	42, // 90: milvus.grpc.MilvusService.HybridSearch:input_type -> milvus.grpc.HSearchParam
	43, // 91: milvus.grpc.MilvusService.HybridSearchInSegments:input_type -> milvus.grpc.HSearchInSegmentsParam
	48, // 92: milvus.grpc.MilvusService.GetEntityByID:input_type -> milvus.grpc.HEntityIdentity
	50, // 93: milvus.grpc.MilvusService.GetEntityIDs:input_type -> milvus.grpc.HGetEntityIDsParam
	51, // 94: milvus.grpc.MilvusService.DeleteEntitiesByID:input_type -> milvus.grpc.HDeleteByIDParam
	53, // 95: milvus.grpc.MilvusService.CreateCollection:output_type -> milvus.grpc.Status
	19, // 96: milvus.grpc.MilvusService.HasCollection:output_type -> milvus.grpc.BoolReply
	6,  // 97: milvus.grpc.MilvusService.DescribeCollection:output_type -> milvus.grpc.CollectionSchema
	20, // 98: milvus.grpc.MilvusService.CountCollection:output_type -> milvus.grpc.CollectionRowCount
	5,  // 99: milvus.grpc.MilvusService.ShowCollections:output_type -> milvus.grpc.CollectionNameList
	25, // 100: milvus.grpc.MilvusService.ShowCollectionInfo:output_type -> milvus.grpc.CollectionInfo
	53, // 101: milvus.grpc.MilvusService.DropCollection:output_type -> milvus.grpc.Status
	53, // 102: milvus.grpc.MilvusService.CreateIndex:output_type -> milvus.grpc.Status
	22, // 103: milvus.grpc.MilvusService.DescribeIndex:output_type -> milvus.grpc.IndexParam
	53, // 104: milvus.grpc.MilvusService.DropIndex:output_type -> milvus.grpc.Status
	53, // 105: milvus.grpc.MilvusService.CreatePartition:output_type -> milvus.grpc.Status
	19, // 106: milvus.grpc.MilvusService.HasPartition:output_type -> milvus.grpc.BoolReply
	8,  // 107: milvus.grpc.MilvusService.ShowPartitions:output_type -> milvus.grpc.PartitionList
	53, // 108: milvus.grpc.MilvusService.DropPartition:output_type -> milvus.grpc.Status
	11, // 109: milvus.grpc.MilvusService.Insert:output_type -> milvus.grpc.VectorIds
	27, // 110: milvus.grpc.MilvusService.GetVectorsByID:output_type -> milvus.grpc.VectorsData
	11, // 111: milvus.grpc.MilvusService.GetVectorIDs:output_type -> milvus.grpc.VectorIds
	17, // 112: milvus.grpc.MilvusService.Search:output_type -> milvus.grpc.TopKQueryResult
	17, // 113: milvus.grpc.MilvusService.SearchByID:output_type -> milvus.grpc.TopKQueryResult
	17, // 114: milvus.grpc.MilvusService.SearchInFiles:output_type -> milvus.grpc.TopKQueryResult
	18, // 115: milvus.grpc.MilvusService.Cmd:output_type -> milvus.grpc.StringReply
	53, // 116: milvus.grpc.MilvusService.DeleteByID:output_type -> milvus.grpc.Status
	53, // 117: milvus.grpc.MilvusService.PreloadCollection:output_type -> milvus.grpc.Status
	53, // 118: milvus.grpc.MilvusService.ReleaseCollection:output_type -> milvus.grpc.Status
	53, // 119: milvus.grpc.MilvusService.ReloadSegments:output_type -> milvus.grpc.Status
	53, // 120: milvus.grpc.MilvusService.Flush:output_type -> milvus.grpc.Status
	53, // 121: milvus.grpc.MilvusService.Compact:output_type -> milvus.grpc.Status
	53, // 122: milvus.grpc.MilvusService.CreateHybridCollection:output_type -> milvus.grpc.Status
	19, // 123: milvus.grpc.MilvusService.HasHybridCollection:output_type -> milvus.grpc.BoolReply
	53, // 124: milvus.grpc.MilvusService.DropHybridCollection:output_type -> milvus.grpc.Status
	34, // 125: milvus.grpc.MilvusService.DescribeHybridCollection:output_type -> milvus.grpc.Mapping
	20, // 126: milvus.grpc.MilvusService.CountHybridCollection:output_type -> milvus.grpc.CollectionRowCount
	35, // 127: milvus.grpc.MilvusService.ShowHybridCollections:output_type -> milvus.grpc.MappingList
	25, // 128: milvus.grpc.MilvusService.ShowHybridCollectionInfo:output_type -> milvus.grpc.CollectionInfo
	53, // 129: milvus.grpc.MilvusService.PreloadHybridCollection:output_type -> milvus.grpc.Status
	49, // 130: milvus.grpc.MilvusService.InsertEntity:output_type -> milvus.grpc.HEntityIDs
	17, // 131: milvus.grpc.MilvusService.HybridSearch:output_type -> milvus.grpc.TopKQueryResult
	17, // 132: milvus.grpc.MilvusService.HybridSearchInSegments:output_type -> milvus.grpc.TopKQueryResult
	45, // 133: milvus.grpc.MilvusService.GetEntityByID:output_type -> milvus.grpc.HEntity
	49, // 134: milvus.grpc.MilvusService.GetEntityIDs:output_type -> milvus.grpc.HEntityIDs
	53, // 135: milvus.grpc.MilvusService.DeleteEntitiesByID:output_type -> milvus.grpc.Status
	95, // [95:136] is the sub-list for method output_type
	54, // [54:95] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_milvus_proto_init() }
func file_milvus_proto_init() {
	if File_milvus_proto != nil {
		return
	}
	file_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_milvus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInFilesParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchByIDParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreloadCollectionParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReLoadSegmentsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopKQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRowCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorsIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorIDsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFieldParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HSearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HSearchInSegmentsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HInsertParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HEntityIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HEntityIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HGetEntityIDsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDeleteByIDParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_milvus_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HIndexParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_milvus_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*FieldType_DataType)(nil),
		(*FieldType_VectorParam)(nil),
	}
	file_milvus_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*FieldValue_Int32Value)(nil),
		(*FieldValue_Int64Value)(nil),
		(*FieldValue_FloatValue)(nil),
		(*FieldValue_DoubleValue)(nil),
		(*FieldValue_StringValue)(nil),
		(*FieldValue_BoolValue)(nil),
		(*FieldValue_VectorValue)(nil),
	}
	file_milvus_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*GeneralQuery_BooleanQuery)(nil),
		(*GeneralQuery_TermQuery)(nil),
		(*GeneralQuery_RangeQuery)(nil),
		(*GeneralQuery_VectorQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_milvus_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_milvus_proto_goTypes,
		DependencyIndexes: file_milvus_proto_depIdxs,
		EnumInfos:         file_milvus_proto_enumTypes,
		MessageInfos:      file_milvus_proto_msgTypes,
	}.Build()
	File_milvus_proto = out.File
	file_milvus_proto_rawDesc = nil
	file_milvus_proto_goTypes = nil
	file_milvus_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilvusServiceClient interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to get vectors data by id array.
	//
	// @param VectorsIdentity, target vector id array.
	//
	// @return VectorsData
	GetVectorsByID(ctx context.Context, in *VectorsIdentity, opts ...grpc.CallOption) (*VectorsData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to preload collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	PreloadCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to release collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	ReleaseCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to reload collection segments
	//
	// @param ReLoadSegmentsParam, target segments information.
	//
	// @return Status
	ReloadSegments(ctx context.Context, in *ReLoadSegmentsParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	CreateHybridCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error)
	HasHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	DropHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	DescribeHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error)
	CountHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	ShowHybridCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*MappingList, error)
	ShowHybridCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	PreloadHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	InsertEntity(ctx context.Context, in *HInsertParam, opts ...grpc.CallOption) (*HEntityIDs, error)
	// TODO(yukun): will change to HQueryResult
	HybridSearch(ctx context.Context, in *HSearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	HybridSearchInSegments(ctx context.Context, in *HSearchInSegmentsParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	GetEntityByID(ctx context.Context, in *HEntityIdentity, opts ...grpc.CallOption) (*HEntity, error)
	GetEntityIDs(ctx context.Context, in *HGetEntityIDsParam, opts ...grpc.CallOption) (*HEntityIDs, error)
	DeleteEntitiesByID(ctx context.Context, in *HDeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
}

type milvusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilvusServiceClient(cc grpc.ClientConnInterface) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error) {
	out := new(CollectionSchema)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error) {
	out := new(CollectionNameList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error) {
	out := new(IndexParam)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error) {
	out := new(PartitionList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorsByID(ctx context.Context, in *VectorsIdentity, opts ...grpc.CallOption) (*VectorsData, error) {
	out := new(VectorsData)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchInFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReleaseCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReloadSegments(ctx context.Context, in *ReLoadSegmentsParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ReloadSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateHybridCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowHybridCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*MappingList, error) {
	out := new(MappingList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowHybridCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowHybridCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowHybridCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) InsertEntity(ctx context.Context, in *HInsertParam, opts ...grpc.CallOption) (*HEntityIDs, error) {
	out := new(HEntityIDs)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/InsertEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HybridSearch(ctx context.Context, in *HSearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HybridSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HybridSearchInSegments(ctx context.Context, in *HSearchInSegmentsParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HybridSearchInSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityByID(ctx context.Context, in *HEntityIdentity, opts ...grpc.CallOption) (*HEntity, error) {
	out := new(HEntity)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityIDs(ctx context.Context, in *HGetEntityIDsParam, opts ...grpc.CallOption) (*HEntityIDs, error) {
	out := new(HEntityIDs)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteEntitiesByID(ctx context.Context, in *HDeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteEntitiesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
type MilvusServiceServer interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *CollectionSchema) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(context.Context, *CollectionName) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *CollectionName) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(context.Context, *Command) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(context.Context, *CollectionName) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(context.Context, *PartitionParam) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(context.Context, *CollectionName) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(context.Context, *InsertParam) (*VectorIds, error)
	//*
	// @brief This method is used to get vectors data by id array.
	//
	// @param VectorsIdentity, target vector id array.
	//
	// @return VectorsData
	GetVectorsByID(context.Context, *VectorsIdentity) (*VectorsData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(context.Context, *GetVectorIDsParam) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(context.Context, *SearchParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(context.Context, *SearchByIDParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(context.Context, *SearchInFilesParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(context.Context, *Command) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(context.Context, *DeleteByIDParam) (*Status, error)
	//*
	// @brief This method is used to preload collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	PreloadCollection(context.Context, *PreloadCollectionParam) (*Status, error)
	//*
	// @brief This method is used to release collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	ReleaseCollection(context.Context, *PreloadCollectionParam) (*Status, error)
	//*
	// @brief This method is used to reload collection segments
	//
	// @param ReLoadSegmentsParam, target segments information.
	//
	// @return Status
	ReloadSegments(context.Context, *ReLoadSegmentsParam) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(context.Context, *FlushParam) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(context.Context, *CollectionName) (*Status, error)
	CreateHybridCollection(context.Context, *Mapping) (*Status, error)
	HasHybridCollection(context.Context, *CollectionName) (*BoolReply, error)
	DropHybridCollection(context.Context, *CollectionName) (*Status, error)
	DescribeHybridCollection(context.Context, *CollectionName) (*Mapping, error)
	CountHybridCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	ShowHybridCollections(context.Context, *Command) (*MappingList, error)
	ShowHybridCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	PreloadHybridCollection(context.Context, *CollectionName) (*Status, error)
	InsertEntity(context.Context, *HInsertParam) (*HEntityIDs, error)
	// TODO(yukun): will change to HQueryResult
	HybridSearch(context.Context, *HSearchParam) (*TopKQueryResult, error)
	HybridSearchInSegments(context.Context, *HSearchInSegmentsParam) (*TopKQueryResult, error)
	GetEntityByID(context.Context, *HEntityIdentity) (*HEntity, error)
	GetEntityIDs(context.Context, *HGetEntityIDsParam) (*HEntityIDs, error)
	DeleteEntitiesByID(context.Context, *HDeleteByIDParam) (*Status, error)
}

// UnimplementedMilvusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (*UnimplementedMilvusServiceServer) CreateCollection(context.Context, *CollectionSchema) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasCollection(context.Context, *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeCollection(context.Context, *CollectionName) (*CollectionSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountCollection(context.Context, *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollections(context.Context, *Command) (*CollectionNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) DropCollection(context.Context, *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateIndex(context.Context, *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeIndex(context.Context, *CollectionName) (*IndexParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DropIndex(context.Context, *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) CreatePartition(context.Context, *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedMilvusServiceServer) HasPartition(context.Context, *PartitionParam) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowPartitions(context.Context, *CollectionName) (*PartitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedMilvusServiceServer) DropPartition(context.Context, *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) Insert(context.Context, *InsertParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorsByID(context.Context, *VectorsIdentity) (*VectorsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorsByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorIDs(context.Context, *GetVectorIDsParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) Search(context.Context, *SearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchByID(context.Context, *SearchByIDParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByID not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchInFiles(context.Context, *SearchInFilesParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInFiles not implemented")
}
func (*UnimplementedMilvusServiceServer) Cmd(context.Context, *Command) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteByID(context.Context, *DeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadCollection(context.Context, *PreloadCollectionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ReleaseCollection(context.Context, *PreloadCollectionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ReloadSegments(context.Context, *ReLoadSegmentsParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadSegments not implemented")
}
func (*UnimplementedMilvusServiceServer) Flush(context.Context, *FlushParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedMilvusServiceServer) Compact(context.Context, *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateHybridCollection(context.Context, *Mapping) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasHybridCollection(context.Context, *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DropHybridCollection(context.Context, *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeHybridCollection(context.Context, *CollectionName) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountHybridCollection(context.Context, *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowHybridCollections(context.Context, *Command) (*MappingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHybridCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowHybridCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHybridCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadHybridCollection(context.Context, *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) InsertEntity(context.Context, *HInsertParam) (*HEntityIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEntity not implemented")
}
func (*UnimplementedMilvusServiceServer) HybridSearch(context.Context, *HSearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (*UnimplementedMilvusServiceServer) HybridSearchInSegments(context.Context, *HSearchInSegmentsParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearchInSegments not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityByID(context.Context, *HEntityIdentity) (*HEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityIDs(context.Context, *HGetEntityIDsParam) (*HEntityIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteEntitiesByID(context.Context, *HDeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitiesByID not implemented")
}

func RegisterMilvusServiceServer(s *grpc.Server, srv MilvusServiceServer) {
	s.RegisterService(&_MilvusService_serviceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*CollectionSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorsIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorsByID(ctx, req.(*VectorsIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, req.(*GetVectorIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchByID(ctx, req.(*SearchByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchInFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInFilesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchInFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, req.(*SearchInFilesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Cmd(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteByID(ctx, req.(*DeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadCollectionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, req.(*PreloadCollectionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadCollectionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, req.(*PreloadCollectionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReloadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReLoadSegmentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReloadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ReloadSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReloadSegments(ctx, req.(*ReLoadSegmentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Compact(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateHybridCollection(ctx, req.(*Mapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowHybridCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowHybridCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowHybridCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowHybridCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowHybridCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowHybridCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowHybridCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowHybridCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_InsertEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HInsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).InsertEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/InsertEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).InsertEntity(ctx, req.(*HInsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HybridSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HybridSearch(ctx, req.(*HSearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HybridSearchInSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSearchInSegmentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HybridSearchInSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HybridSearchInSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HybridSearchInSegments(ctx, req.(*HSearchInSegmentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HEntityIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, req.(*HEntityIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetEntityIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, req.(*HGetEntityIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteEntitiesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteEntitiesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteEntitiesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteEntitiesByID(ctx, req.(*HDeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilvusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.grpc.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "CountCollection",
			Handler:    _MilvusService_CountCollection_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowCollectionInfo",
			Handler:    _MilvusService_ShowCollectionInfo_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _MilvusService_HasPartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "GetVectorsByID",
			Handler:    _MilvusService_GetVectorsByID_Handler,
		},
		{
			MethodName: "GetVectorIDs",
			Handler:    _MilvusService_GetVectorIDs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "SearchByID",
			Handler:    _MilvusService_SearchByID_Handler,
		},
		{
			MethodName: "SearchInFiles",
			Handler:    _MilvusService_SearchInFiles_Handler,
		},
		{
			MethodName: "Cmd",
			Handler:    _MilvusService_Cmd_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _MilvusService_DeleteByID_Handler,
		},
		{
			MethodName: "PreloadCollection",
			Handler:    _MilvusService_PreloadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _MilvusService_ReleaseCollection_Handler,
		},
		{
			MethodName: "ReloadSegments",
			Handler:    _MilvusService_ReloadSegments_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _MilvusService_Compact_Handler,
		},
		{
			MethodName: "CreateHybridCollection",
			Handler:    _MilvusService_CreateHybridCollection_Handler,
		},
		{
			MethodName: "HasHybridCollection",
			Handler:    _MilvusService_HasHybridCollection_Handler,
		},
		{
			MethodName: "DropHybridCollection",
			Handler:    _MilvusService_DropHybridCollection_Handler,
		},
		{
			MethodName: "DescribeHybridCollection",
			Handler:    _MilvusService_DescribeHybridCollection_Handler,
		},
		{
			MethodName: "CountHybridCollection",
			Handler:    _MilvusService_CountHybridCollection_Handler,
		},
		{
			MethodName: "ShowHybridCollections",
			Handler:    _MilvusService_ShowHybridCollections_Handler,
		},
		{
			MethodName: "ShowHybridCollectionInfo",
			Handler:    _MilvusService_ShowHybridCollectionInfo_Handler,
		},
		{
			MethodName: "PreloadHybridCollection",
			Handler:    _MilvusService_PreloadHybridCollection_Handler,
		},
		{
			MethodName: "InsertEntity",
			Handler:    _MilvusService_InsertEntity_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _MilvusService_HybridSearch_Handler,
		},
		{
			MethodName: "HybridSearchInSegments",
			Handler:    _MilvusService_HybridSearchInSegments_Handler,
		},
		{
			MethodName: "GetEntityByID",
			Handler:    _MilvusService_GetEntityByID_Handler,
		},
		{
			MethodName: "GetEntityIDs",
			Handler:    _MilvusService_GetEntityIDs_Handler,
		},
		{
			MethodName: "DeleteEntitiesByID",
			Handler:    _MilvusService_DeleteEntitiesByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
