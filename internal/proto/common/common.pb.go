// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: common.proto

package common

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_Success                       ErrorCode = 0
	ErrorCode_UnexpectedError               ErrorCode = 1
	ErrorCode_ConnectFailed                 ErrorCode = 2
	ErrorCode_PermissionDenied              ErrorCode = 3
	ErrorCode_CollectionNotExists           ErrorCode = 4
	ErrorCode_IllegalArgument               ErrorCode = 5
	ErrorCode_IllegalDimension              ErrorCode = 7
	ErrorCode_IllegalIndexType              ErrorCode = 8
	ErrorCode_IllegalCollectionName         ErrorCode = 9
	ErrorCode_IllegalTOPK                   ErrorCode = 10
	ErrorCode_IllegalRowRecord              ErrorCode = 11
	ErrorCode_IllegalVectorID               ErrorCode = 12
	ErrorCode_IllegalSearchResult           ErrorCode = 13
	ErrorCode_FileNotFound                  ErrorCode = 14
	ErrorCode_MetaFailed                    ErrorCode = 15
	ErrorCode_CacheFailed                   ErrorCode = 16
	ErrorCode_CannotCreateFolder            ErrorCode = 17
	ErrorCode_CannotCreateFile              ErrorCode = 18
	ErrorCode_CannotDeleteFolder            ErrorCode = 19
	ErrorCode_CannotDeleteFile              ErrorCode = 20
	ErrorCode_BuildIndexError               ErrorCode = 21
	ErrorCode_IllegalNLIST                  ErrorCode = 22
	ErrorCode_IllegalMetricType             ErrorCode = 23
	ErrorCode_OutOfMemory                   ErrorCode = 24
	ErrorCode_IndexNotExist                 ErrorCode = 25
	ErrorCode_EmptyCollection               ErrorCode = 26
	ErrorCode_UpdateImportTaskFailure       ErrorCode = 27
	ErrorCode_CollectionNameNotFound        ErrorCode = 28
	ErrorCode_CreateCredentialFailure       ErrorCode = 29
	ErrorCode_UpdateCredentialFailure       ErrorCode = 30
	ErrorCode_DeleteCredentialFailure       ErrorCode = 31
	ErrorCode_GetCredentialFailure          ErrorCode = 32
	ErrorCode_ListCredUsersFailure          ErrorCode = 33
	ErrorCode_GetUserFailure                ErrorCode = 34
	ErrorCode_CreateRoleFailure             ErrorCode = 35
	ErrorCode_DropRoleFailure               ErrorCode = 36
	ErrorCode_OperateUserRoleFailure        ErrorCode = 37
	ErrorCode_SelectRoleFailure             ErrorCode = 38
	ErrorCode_SelectUserFailure             ErrorCode = 39
	ErrorCode_SelectResourceFailure         ErrorCode = 40
	ErrorCode_OperatePrivilegeFailure       ErrorCode = 41
	ErrorCode_SelectGrantFailure            ErrorCode = 42
	ErrorCode_RefreshPolicyInfoCacheFailure ErrorCode = 43
	ErrorCode_ListPolicyFailure             ErrorCode = 44
	ErrorCode_NotShardLeader                ErrorCode = 45
	ErrorCode_NoReplicaAvailable            ErrorCode = 46
	// internal error code.
	ErrorCode_DDRequestRace ErrorCode = 1000
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "Success",
		1:    "UnexpectedError",
		2:    "ConnectFailed",
		3:    "PermissionDenied",
		4:    "CollectionNotExists",
		5:    "IllegalArgument",
		7:    "IllegalDimension",
		8:    "IllegalIndexType",
		9:    "IllegalCollectionName",
		10:   "IllegalTOPK",
		11:   "IllegalRowRecord",
		12:   "IllegalVectorID",
		13:   "IllegalSearchResult",
		14:   "FileNotFound",
		15:   "MetaFailed",
		16:   "CacheFailed",
		17:   "CannotCreateFolder",
		18:   "CannotCreateFile",
		19:   "CannotDeleteFolder",
		20:   "CannotDeleteFile",
		21:   "BuildIndexError",
		22:   "IllegalNLIST",
		23:   "IllegalMetricType",
		24:   "OutOfMemory",
		25:   "IndexNotExist",
		26:   "EmptyCollection",
		27:   "UpdateImportTaskFailure",
		28:   "CollectionNameNotFound",
		29:   "CreateCredentialFailure",
		30:   "UpdateCredentialFailure",
		31:   "DeleteCredentialFailure",
		32:   "GetCredentialFailure",
		33:   "ListCredUsersFailure",
		34:   "GetUserFailure",
		35:   "CreateRoleFailure",
		36:   "DropRoleFailure",
		37:   "OperateUserRoleFailure",
		38:   "SelectRoleFailure",
		39:   "SelectUserFailure",
		40:   "SelectResourceFailure",
		41:   "OperatePrivilegeFailure",
		42:   "SelectGrantFailure",
		43:   "RefreshPolicyInfoCacheFailure",
		44:   "ListPolicyFailure",
		45:   "NotShardLeader",
		46:   "NoReplicaAvailable",
		1000: "DDRequestRace",
	}
	ErrorCode_value = map[string]int32{
		"Success":                       0,
		"UnexpectedError":               1,
		"ConnectFailed":                 2,
		"PermissionDenied":              3,
		"CollectionNotExists":           4,
		"IllegalArgument":               5,
		"IllegalDimension":              7,
		"IllegalIndexType":              8,
		"IllegalCollectionName":         9,
		"IllegalTOPK":                   10,
		"IllegalRowRecord":              11,
		"IllegalVectorID":               12,
		"IllegalSearchResult":           13,
		"FileNotFound":                  14,
		"MetaFailed":                    15,
		"CacheFailed":                   16,
		"CannotCreateFolder":            17,
		"CannotCreateFile":              18,
		"CannotDeleteFolder":            19,
		"CannotDeleteFile":              20,
		"BuildIndexError":               21,
		"IllegalNLIST":                  22,
		"IllegalMetricType":             23,
		"OutOfMemory":                   24,
		"IndexNotExist":                 25,
		"EmptyCollection":               26,
		"UpdateImportTaskFailure":       27,
		"CollectionNameNotFound":        28,
		"CreateCredentialFailure":       29,
		"UpdateCredentialFailure":       30,
		"DeleteCredentialFailure":       31,
		"GetCredentialFailure":          32,
		"ListCredUsersFailure":          33,
		"GetUserFailure":                34,
		"CreateRoleFailure":             35,
		"DropRoleFailure":               36,
		"OperateUserRoleFailure":        37,
		"SelectRoleFailure":             38,
		"SelectUserFailure":             39,
		"SelectResourceFailure":         40,
		"OperatePrivilegeFailure":       41,
		"SelectGrantFailure":            42,
		"RefreshPolicyInfoCacheFailure": 43,
		"ListPolicyFailure":             44,
		"NotShardLeader":                45,
		"NoReplicaAvailable":            46,
		"DDRequestRace":                 1000,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type IndexState int32

const (
	IndexState_IndexStateNone IndexState = 0
	IndexState_Unissued       IndexState = 1
	IndexState_InProgress     IndexState = 2
	IndexState_Finished       IndexState = 3
	IndexState_Failed         IndexState = 4
)

// Enum value maps for IndexState.
var (
	IndexState_name = map[int32]string{
		0: "IndexStateNone",
		1: "Unissued",
		2: "InProgress",
		3: "Finished",
		4: "Failed",
	}
	IndexState_value = map[string]int32{
		"IndexStateNone": 0,
		"Unissued":       1,
		"InProgress":     2,
		"Finished":       3,
		"Failed":         4,
	}
)

func (x IndexState) Enum() *IndexState {
	p := new(IndexState)
	*p = x
	return p
}

func (x IndexState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (IndexState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x IndexState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexState.Descriptor instead.
func (IndexState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type SegmentState int32

const (
	SegmentState_SegmentStateNone SegmentState = 0
	SegmentState_NotExist         SegmentState = 1
	SegmentState_Growing          SegmentState = 2
	SegmentState_Sealed           SegmentState = 3
	SegmentState_Flushed          SegmentState = 4
	SegmentState_Flushing         SegmentState = 5
	SegmentState_Dropped          SegmentState = 6
	SegmentState_Importing        SegmentState = 7
)

// Enum value maps for SegmentState.
var (
	SegmentState_name = map[int32]string{
		0: "SegmentStateNone",
		1: "NotExist",
		2: "Growing",
		3: "Sealed",
		4: "Flushed",
		5: "Flushing",
		6: "Dropped",
		7: "Importing",
	}
	SegmentState_value = map[string]int32{
		"SegmentStateNone": 0,
		"NotExist":         1,
		"Growing":          2,
		"Sealed":           3,
		"Flushed":          4,
		"Flushing":         5,
		"Dropped":          6,
		"Importing":        7,
	}
)

func (x SegmentState) Enum() *SegmentState {
	p := new(SegmentState)
	*p = x
	return p
}

func (x SegmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (SegmentState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x SegmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentState.Descriptor instead.
func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type PlaceholderType int32

const (
	PlaceholderType_None         PlaceholderType = 0
	PlaceholderType_BinaryVector PlaceholderType = 100
	PlaceholderType_FloatVector  PlaceholderType = 101
)

// Enum value maps for PlaceholderType.
var (
	PlaceholderType_name = map[int32]string{
		0:   "None",
		100: "BinaryVector",
		101: "FloatVector",
	}
	PlaceholderType_value = map[string]int32{
		"None":         0,
		"BinaryVector": 100,
		"FloatVector":  101,
	}
)

func (x PlaceholderType) Enum() *PlaceholderType {
	p := new(PlaceholderType)
	*p = x
	return p
}

func (x PlaceholderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceholderType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (PlaceholderType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x PlaceholderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceholderType.Descriptor instead.
func (PlaceholderType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type MsgType int32

const (
	MsgType_Undefined MsgType = 0
	// DEFINITION REQUESTS: COLLECTION
	MsgType_CreateCollection   MsgType = 100
	MsgType_DropCollection     MsgType = 101
	MsgType_HasCollection      MsgType = 102
	MsgType_DescribeCollection MsgType = 103
	MsgType_ShowCollections    MsgType = 104
	MsgType_GetSystemConfigs   MsgType = 105
	MsgType_LoadCollection     MsgType = 106
	MsgType_ReleaseCollection  MsgType = 107
	MsgType_CreateAlias        MsgType = 108
	MsgType_DropAlias          MsgType = 109
	MsgType_AlterAlias         MsgType = 110
	// DEFINITION REQUESTS: PARTITION
	MsgType_CreatePartition   MsgType = 200
	MsgType_DropPartition     MsgType = 201
	MsgType_HasPartition      MsgType = 202
	MsgType_DescribePartition MsgType = 203
	MsgType_ShowPartitions    MsgType = 204
	MsgType_LoadPartitions    MsgType = 205
	MsgType_ReleasePartitions MsgType = 206
	// DEFINE REQUESTS: SEGMENT
	MsgType_ShowSegments        MsgType = 250
	MsgType_DescribeSegment     MsgType = 251
	MsgType_LoadSegments        MsgType = 252
	MsgType_ReleaseSegments     MsgType = 253
	MsgType_HandoffSegments     MsgType = 254
	MsgType_LoadBalanceSegments MsgType = 255
	MsgType_DescribeSegments    MsgType = 256
	// DEFINITION REQUESTS: INDEX
	MsgType_CreateIndex   MsgType = 300
	MsgType_DescribeIndex MsgType = 301
	MsgType_DropIndex     MsgType = 302
	// MANIPULATION REQUESTS
	MsgType_Insert             MsgType = 400
	MsgType_Delete             MsgType = 401
	MsgType_Flush              MsgType = 402
	MsgType_ResendSegmentStats MsgType = 403
	// QUERY
	MsgType_Search                   MsgType = 500
	MsgType_SearchResult             MsgType = 501
	MsgType_GetIndexState            MsgType = 502
	MsgType_GetIndexBuildProgress    MsgType = 503
	MsgType_GetCollectionStatistics  MsgType = 504
	MsgType_GetPartitionStatistics   MsgType = 505
	MsgType_Retrieve                 MsgType = 506
	MsgType_RetrieveResult           MsgType = 507
	MsgType_WatchDmChannels          MsgType = 508
	MsgType_RemoveDmChannels         MsgType = 509
	MsgType_WatchQueryChannels       MsgType = 510
	MsgType_RemoveQueryChannels      MsgType = 511
	MsgType_SealedSegmentsChangeInfo MsgType = 512
	MsgType_WatchDeltaChannels       MsgType = 513
	MsgType_GetShardLeaders          MsgType = 514
	MsgType_GetReplicas              MsgType = 515
	// DATA SERVICE
	MsgType_SegmentInfo     MsgType = 600
	MsgType_SystemInfo      MsgType = 601
	MsgType_GetRecoveryInfo MsgType = 602
	MsgType_GetSegmentState MsgType = 603
	// SYSTEM CONTROL
	MsgType_TimeTick          MsgType = 1200
	MsgType_QueryNodeStats    MsgType = 1201 // GOOSE TODO: Remove kQueryNodeStats
	MsgType_LoadIndex         MsgType = 1202
	MsgType_RequestID         MsgType = 1203
	MsgType_RequestTSO        MsgType = 1204
	MsgType_AllocateSegment   MsgType = 1205
	MsgType_SegmentStatistics MsgType = 1206
	MsgType_SegmentFlushDone  MsgType = 1207
	MsgType_DataNodeTt        MsgType = 1208
	// Credential
	MsgType_CreateCredential  MsgType = 1500
	MsgType_GetCredential     MsgType = 1501
	MsgType_DeleteCredential  MsgType = 1502
	MsgType_UpdateCredential  MsgType = 1503
	MsgType_ListCredUsernames MsgType = 1504
	// RBAC
	MsgType_CreateRole             MsgType = 1600
	MsgType_DropRole               MsgType = 1601
	MsgType_OperateUserRole        MsgType = 1602
	MsgType_SelectRole             MsgType = 1603
	MsgType_SelectUser             MsgType = 1604
	MsgType_SelectResource         MsgType = 1605
	MsgType_OperatePrivilege       MsgType = 1606
	MsgType_SelectGrant            MsgType = 1607
	MsgType_RefreshPolicyInfoCache MsgType = 1608
	MsgType_ListPolicy             MsgType = 1609
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:    "Undefined",
		100:  "CreateCollection",
		101:  "DropCollection",
		102:  "HasCollection",
		103:  "DescribeCollection",
		104:  "ShowCollections",
		105:  "GetSystemConfigs",
		106:  "LoadCollection",
		107:  "ReleaseCollection",
		108:  "CreateAlias",
		109:  "DropAlias",
		110:  "AlterAlias",
		200:  "CreatePartition",
		201:  "DropPartition",
		202:  "HasPartition",
		203:  "DescribePartition",
		204:  "ShowPartitions",
		205:  "LoadPartitions",
		206:  "ReleasePartitions",
		250:  "ShowSegments",
		251:  "DescribeSegment",
		252:  "LoadSegments",
		253:  "ReleaseSegments",
		254:  "HandoffSegments",
		255:  "LoadBalanceSegments",
		256:  "DescribeSegments",
		300:  "CreateIndex",
		301:  "DescribeIndex",
		302:  "DropIndex",
		400:  "Insert",
		401:  "Delete",
		402:  "Flush",
		403:  "ResendSegmentStats",
		500:  "Search",
		501:  "SearchResult",
		502:  "GetIndexState",
		503:  "GetIndexBuildProgress",
		504:  "GetCollectionStatistics",
		505:  "GetPartitionStatistics",
		506:  "Retrieve",
		507:  "RetrieveResult",
		508:  "WatchDmChannels",
		509:  "RemoveDmChannels",
		510:  "WatchQueryChannels",
		511:  "RemoveQueryChannels",
		512:  "SealedSegmentsChangeInfo",
		513:  "WatchDeltaChannels",
		514:  "GetShardLeaders",
		515:  "GetReplicas",
		600:  "SegmentInfo",
		601:  "SystemInfo",
		602:  "GetRecoveryInfo",
		603:  "GetSegmentState",
		1200: "TimeTick",
		1201: "QueryNodeStats",
		1202: "LoadIndex",
		1203: "RequestID",
		1204: "RequestTSO",
		1205: "AllocateSegment",
		1206: "SegmentStatistics",
		1207: "SegmentFlushDone",
		1208: "DataNodeTt",
		1500: "CreateCredential",
		1501: "GetCredential",
		1502: "DeleteCredential",
		1503: "UpdateCredential",
		1504: "ListCredUsernames",
		1600: "CreateRole",
		1601: "DropRole",
		1602: "OperateUserRole",
		1603: "SelectRole",
		1604: "SelectUser",
		1605: "SelectResource",
		1606: "OperatePrivilege",
		1607: "SelectGrant",
		1608: "RefreshPolicyInfoCache",
		1609: "ListPolicy",
	}
	MsgType_value = map[string]int32{
		"Undefined":                0,
		"CreateCollection":         100,
		"DropCollection":           101,
		"HasCollection":            102,
		"DescribeCollection":       103,
		"ShowCollections":          104,
		"GetSystemConfigs":         105,
		"LoadCollection":           106,
		"ReleaseCollection":        107,
		"CreateAlias":              108,
		"DropAlias":                109,
		"AlterAlias":               110,
		"CreatePartition":          200,
		"DropPartition":            201,
		"HasPartition":             202,
		"DescribePartition":        203,
		"ShowPartitions":           204,
		"LoadPartitions":           205,
		"ReleasePartitions":        206,
		"ShowSegments":             250,
		"DescribeSegment":          251,
		"LoadSegments":             252,
		"ReleaseSegments":          253,
		"HandoffSegments":          254,
		"LoadBalanceSegments":      255,
		"DescribeSegments":         256,
		"CreateIndex":              300,
		"DescribeIndex":            301,
		"DropIndex":                302,
		"Insert":                   400,
		"Delete":                   401,
		"Flush":                    402,
		"ResendSegmentStats":       403,
		"Search":                   500,
		"SearchResult":             501,
		"GetIndexState":            502,
		"GetIndexBuildProgress":    503,
		"GetCollectionStatistics":  504,
		"GetPartitionStatistics":   505,
		"Retrieve":                 506,
		"RetrieveResult":           507,
		"WatchDmChannels":          508,
		"RemoveDmChannels":         509,
		"WatchQueryChannels":       510,
		"RemoveQueryChannels":      511,
		"SealedSegmentsChangeInfo": 512,
		"WatchDeltaChannels":       513,
		"GetShardLeaders":          514,
		"GetReplicas":              515,
		"SegmentInfo":              600,
		"SystemInfo":               601,
		"GetRecoveryInfo":          602,
		"GetSegmentState":          603,
		"TimeTick":                 1200,
		"QueryNodeStats":           1201,
		"LoadIndex":                1202,
		"RequestID":                1203,
		"RequestTSO":               1204,
		"AllocateSegment":          1205,
		"SegmentStatistics":        1206,
		"SegmentFlushDone":         1207,
		"DataNodeTt":               1208,
		"CreateCredential":         1500,
		"GetCredential":            1501,
		"DeleteCredential":         1502,
		"UpdateCredential":         1503,
		"ListCredUsernames":        1504,
		"CreateRole":               1600,
		"DropRole":                 1601,
		"OperateUserRole":          1602,
		"SelectRole":               1603,
		"SelectUser":               1604,
		"SelectResource":           1605,
		"OperatePrivilege":         1606,
		"SelectGrant":              1607,
		"RefreshPolicyInfoCache":   1608,
		"ListPolicy":               1609,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type DslType int32

const (
	DslType_Dsl        DslType = 0
	DslType_BoolExprV1 DslType = 1
)

// Enum value maps for DslType.
var (
	DslType_name = map[int32]string{
		0: "Dsl",
		1: "BoolExprV1",
	}
	DslType_value = map[string]int32{
		"Dsl":        0,
		"BoolExprV1": 1,
	}
)

func (x DslType) Enum() *DslType {
	p := new(DslType)
	*p = x
	return p
}

func (x DslType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DslType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (DslType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x DslType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DslType.Descriptor instead.
func (DslType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type CompactionState int32

const (
	CompactionState_UndefiedState CompactionState = 0
	CompactionState_Executing     CompactionState = 1
	CompactionState_Completed     CompactionState = 2
)

// Enum value maps for CompactionState.
var (
	CompactionState_name = map[int32]string{
		0: "UndefiedState",
		1: "Executing",
		2: "Completed",
	}
	CompactionState_value = map[string]int32{
		"UndefiedState": 0,
		"Executing":     1,
		"Completed":     2,
	}
)

func (x CompactionState) Enum() *CompactionState {
	p := new(CompactionState)
	*p = x
	return p
}

func (x CompactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (CompactionState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x CompactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompactionState.Descriptor instead.
func (CompactionState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type ConsistencyLevel int32

const (
	ConsistencyLevel_Strong     ConsistencyLevel = 0
	ConsistencyLevel_Session    ConsistencyLevel = 1 // default in PyMilvus
	ConsistencyLevel_Bounded    ConsistencyLevel = 2
	ConsistencyLevel_Eventually ConsistencyLevel = 3
	ConsistencyLevel_Customized ConsistencyLevel = 4 // Users pass their own `guarantee_timestamp`.
)

// Enum value maps for ConsistencyLevel.
var (
	ConsistencyLevel_name = map[int32]string{
		0: "Strong",
		1: "Session",
		2: "Bounded",
		3: "Eventually",
		4: "Customized",
	}
	ConsistencyLevel_value = map[string]int32{
		"Strong":     0,
		"Session":    1,
		"Bounded":    2,
		"Eventually": 3,
		"Customized": 4,
	}
)

func (x ConsistencyLevel) Enum() *ConsistencyLevel {
	p := new(ConsistencyLevel)
	*p = x
	return p
}

func (x ConsistencyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (ConsistencyLevel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x ConsistencyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyLevel.Descriptor instead.
func (ConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type ImportState int32

const (
	ImportState_ImportPending      ImportState = 0
	ImportState_ImportFailed       ImportState = 1
	ImportState_ImportStarted      ImportState = 2
	ImportState_ImportDownloaded   ImportState = 3
	ImportState_ImportParsed       ImportState = 4
	ImportState_ImportPersisted    ImportState = 5
	ImportState_ImportCompleted    ImportState = 6
	ImportState_ImportAllocSegment ImportState = 10
)

// Enum value maps for ImportState.
var (
	ImportState_name = map[int32]string{
		0:  "ImportPending",
		1:  "ImportFailed",
		2:  "ImportStarted",
		3:  "ImportDownloaded",
		4:  "ImportParsed",
		5:  "ImportPersisted",
		6:  "ImportCompleted",
		10: "ImportAllocSegment",
	}
	ImportState_value = map[string]int32{
		"ImportPending":      0,
		"ImportFailed":       1,
		"ImportStarted":      2,
		"ImportDownloaded":   3,
		"ImportParsed":       4,
		"ImportPersisted":    5,
		"ImportCompleted":    6,
		"ImportAllocSegment": 10,
	}
)

func (x ImportState) Enum() *ImportState {
	p := new(ImportState)
	*p = x
	return p
}

func (x ImportState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (ImportState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x ImportState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportState.Descriptor instead.
func (ImportState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type ResourceType int32

const (
	ResourceType_Collection ResourceType = 0
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "Collection",
	}
	ResourceType_value = map[string]int32{
		"Collection": 0,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type ResourcePrivilege int32

const (
	ResourcePrivilege_PrivilegeAll     ResourcePrivilege = 0
	ResourcePrivilege_PrivilegeCreate  ResourcePrivilege = 1
	ResourcePrivilege_PrivilegeDrop    ResourcePrivilege = 2
	ResourcePrivilege_PrivilegeAlter   ResourcePrivilege = 3
	ResourcePrivilege_PrivilegeRead    ResourcePrivilege = 4
	ResourcePrivilege_PrivilegeLoad    ResourcePrivilege = 5
	ResourcePrivilege_PrivilegeRelease ResourcePrivilege = 6
	ResourcePrivilege_PrivilegeCompact ResourcePrivilege = 7
	ResourcePrivilege_PrivilegeInsert  ResourcePrivilege = 8
	ResourcePrivilege_PrivilegeDelete  ResourcePrivilege = 9
)

// Enum value maps for ResourcePrivilege.
var (
	ResourcePrivilege_name = map[int32]string{
		0: "PrivilegeAll",
		1: "PrivilegeCreate",
		2: "PrivilegeDrop",
		3: "PrivilegeAlter",
		4: "PrivilegeRead",
		5: "PrivilegeLoad",
		6: "PrivilegeRelease",
		7: "PrivilegeCompact",
		8: "PrivilegeInsert",
		9: "PrivilegeDelete",
	}
	ResourcePrivilege_value = map[string]int32{
		"PrivilegeAll":     0,
		"PrivilegeCreate":  1,
		"PrivilegeDrop":    2,
		"PrivilegeAlter":   3,
		"PrivilegeRead":    4,
		"PrivilegeLoad":    5,
		"PrivilegeRelease": 6,
		"PrivilegeCompact": 7,
		"PrivilegeInsert":  8,
		"PrivilegeDelete":  9,
	}
)

func (x ResourcePrivilege) Enum() *ResourcePrivilege {
	p := new(ResourcePrivilege)
	*p = x
	return p
}

func (x ResourcePrivilege) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourcePrivilege) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (ResourcePrivilege) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x ResourcePrivilege) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourcePrivilege.Descriptor instead.
func (ResourcePrivilege) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=milvus.proto.common.ErrorCode" json:"error_code,omitempty"`
	Reason    string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_Success
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type KeyDataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KeyDataPair) Reset() {
	*x = KeyDataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDataPair) ProtoMessage() {}

func (x *KeyDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDataPair.ProtoReflect.Descriptor instead.
func (*KeyDataPair) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *KeyDataPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyDataPair) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *Blob) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PlaceholderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type PlaceholderType `protobuf:"varint,2,opt,name=type,proto3,enum=milvus.proto.common.PlaceholderType" json:"type,omitempty"`
	// values is a 2d-array, every array contains a vector
	Values [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PlaceholderValue) Reset() {
	*x = PlaceholderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderValue) ProtoMessage() {}

func (x *PlaceholderValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderValue.ProtoReflect.Descriptor instead.
func (*PlaceholderValue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *PlaceholderValue) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *PlaceholderValue) GetType() PlaceholderType {
	if x != nil {
		return x.Type
	}
	return PlaceholderType_None
}

func (x *PlaceholderValue) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type PlaceholderGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Placeholders []*PlaceholderValue `protobuf:"bytes,1,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
}

func (x *PlaceholderGroup) Reset() {
	*x = PlaceholderGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderGroup) ProtoMessage() {}

func (x *PlaceholderGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderGroup.ProtoReflect.Descriptor instead.
func (*PlaceholderGroup) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *PlaceholderGroup) GetPlaceholders() []*PlaceholderValue {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Address) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Address) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MsgBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType   MsgType `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=milvus.proto.common.MsgType" json:"msg_type,omitempty"`
	MsgID     int64   `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	Timestamp uint64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourceID  int64   `protobuf:"varint,4,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
}

func (x *MsgBase) Reset() {
	*x = MsgBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBase) ProtoMessage() {}

func (x *MsgBase) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgBase.ProtoReflect.Descriptor instead.
func (*MsgBase) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *MsgBase) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_Undefined
}

func (x *MsgBase) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *MsgBase) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MsgBase) GetSourceID() int64 {
	if x != nil {
		return x.SourceID
	}
	return 0
}

// Don't Modify This. @czs
type MsgHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *MsgHeader) Reset() {
	*x = MsgHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeader) ProtoMessage() {}

func (x *MsgHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeader.ProtoReflect.Descriptor instead.
func (*MsgHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *MsgHeader) GetBase() *MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

// Don't Modify This. @czs
type DMLMsgHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ShardName string   `protobuf:"bytes,2,opt,name=shardName,proto3" json:"shardName,omitempty"`
}

func (x *DMLMsgHeader) Reset() {
	*x = DMLMsgHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMLMsgHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMLMsgHeader) ProtoMessage() {}

func (x *DMLMsgHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMLMsgHeader.ProtoReflect.Descriptor instead.
func (*DMLMsgHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *DMLMsgHeader) GetBase() *MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DMLMsgHeader) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type PrivilegeExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType      ResourceType      `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=milvus.proto.common.ResourceType" json:"resource_type,omitempty"`
	ResourcePrivilege ResourcePrivilege `protobuf:"varint,2,opt,name=resource_privilege,json=resourcePrivilege,proto3,enum=milvus.proto.common.ResourcePrivilege" json:"resource_privilege,omitempty"`
	ResourceNameIndex int32             `protobuf:"varint,3,opt,name=resource_name_index,json=resourceNameIndex,proto3" json:"resource_name_index,omitempty"`
}

func (x *PrivilegeExt) Reset() {
	*x = PrivilegeExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeExt) ProtoMessage() {}

func (x *PrivilegeExt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeExt.ProtoReflect.Descriptor instead.
func (*PrivilegeExt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *PrivilegeExt) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_Collection
}

func (x *PrivilegeExt) GetResourcePrivilege() ResourcePrivilege {
	if x != nil {
		return x.ResourcePrivilege
	}
	return ResourcePrivilege_PrivilegeAll
}

func (x *PrivilegeExt) GetResourceNameIndex() int32 {
	if x != nil {
		return x.ResourceNameIndex
	}
	return 0
}

var file_common_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.MessageOptions)(nil),
		ExtensionType: (*PrivilegeExt)(nil),
		Field:         1001,
		Name:          "milvus.proto.common.privilege_ext_obj",
		Tag:           "bytes,1001,opt,name=privilege_ext_obj",
		Filename:      "common.proto",
	},
}

// Extension fields to descriptor.MessageOptions.
var (
	// optional milvus.proto.common.PrivilegeExt privilege_ext_obj = 1001;
	E_PrivilegeExtObj = &file_common_proto_extTypes[0]
)

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x76, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x09,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x0c, 0x44,
	0x4d, 0x4c, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0xbe, 0x08, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x4f, 0x50, 0x4b, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x0b,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0f,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x10, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x12, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x14, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x19, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10,
	0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x1c, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x20, 0x12, 0x18,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x24, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x28, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x2a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x2d,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x10, 0xe8, 0x07, 0x2a, 0x58, 0x0a, 0x0a,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x6e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x2a, 0x3e, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x65, 0x2a, 0xb6, 0x0c, 0x0a, 0x07,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x64, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x68,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x10, 0x69, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6a, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10,
	0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10,
	0x6e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc9, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x48,
	0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xca, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xcb, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xcc, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xcd, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xce, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfa, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xfb,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0xfc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfd, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfe, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x80,
	0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x10, 0xac, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0xad, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0xae, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x10, 0x90, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x91,
	0x03, 0x12, 0x0a, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x92, 0x03, 0x12, 0x17, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x10, 0x93, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x10, 0xf4, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x10, 0xf5, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xf6, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0xf7, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x10, 0xf8, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0xf9,
	0x03, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x10, 0xfa, 0x03,
	0x12, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0xfb, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xfc, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10,
	0xfd, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xfe, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x10, 0xff, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0x80, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0x81, 0x04, 0x12, 0x14, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x10, 0x82, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x10, 0x83, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0xd8, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xd9, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xda, 0x04, 0x12, 0x14,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0xdb, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x10, 0xb0, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xb1, 0x09, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xb2, 0x09, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x10, 0xb3, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x53, 0x4f, 0x10, 0xb4, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xb5, 0x09, 0x12,
	0x16, 0x0a, 0x11, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x10, 0xb6, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0xb7, 0x09, 0x12, 0x0f,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x74, 0x10, 0xb8, 0x09, 0x12,
	0x15, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x10, 0xdc, 0x0b, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0xdd, 0x0b, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0xde,
	0x0b, 0x12, 0x15, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0xdf, 0x0b, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x10, 0xe0, 0x0b,
	0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc0,
	0x0c, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc1, 0x0c,
	0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x10, 0xc2, 0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc3, 0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0xc4, 0x0c, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0xc5, 0x0c, 0x12, 0x15, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x10, 0xc6, 0x0c, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x10, 0xc7, 0x0c, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x10, 0xc8, 0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x10, 0xc9, 0x0c, 0x2a, 0x22, 0x0a, 0x07, 0x44, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x73, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x56, 0x31, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x10, 0x04, 0x2a, 0xaf, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x2a, 0x1e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x2a, 0xdd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x10, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x09, 0x3a, 0x6f, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x78, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x45, 0x78, 0x74, 0x4f, 0x62, 0x6a, 0x42, 0x57, 0x0a, 0x0e, 0x69, 0x6f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f,
	0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0xa0,
	0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_common_proto_goTypes = []interface{}{
	(ErrorCode)(0),                    // 0: milvus.proto.common.ErrorCode
	(IndexState)(0),                   // 1: milvus.proto.common.IndexState
	(SegmentState)(0),                 // 2: milvus.proto.common.SegmentState
	(PlaceholderType)(0),              // 3: milvus.proto.common.PlaceholderType
	(MsgType)(0),                      // 4: milvus.proto.common.MsgType
	(DslType)(0),                      // 5: milvus.proto.common.DslType
	(CompactionState)(0),              // 6: milvus.proto.common.CompactionState
	(ConsistencyLevel)(0),             // 7: milvus.proto.common.ConsistencyLevel
	(ImportState)(0),                  // 8: milvus.proto.common.ImportState
	(ResourceType)(0),                 // 9: milvus.proto.common.ResourceType
	(ResourcePrivilege)(0),            // 10: milvus.proto.common.ResourcePrivilege
	(*Status)(nil),                    // 11: milvus.proto.common.Status
	(*KeyValuePair)(nil),              // 12: milvus.proto.common.KeyValuePair
	(*KeyDataPair)(nil),               // 13: milvus.proto.common.KeyDataPair
	(*Blob)(nil),                      // 14: milvus.proto.common.Blob
	(*PlaceholderValue)(nil),          // 15: milvus.proto.common.PlaceholderValue
	(*PlaceholderGroup)(nil),          // 16: milvus.proto.common.PlaceholderGroup
	(*Address)(nil),                   // 17: milvus.proto.common.Address
	(*MsgBase)(nil),                   // 18: milvus.proto.common.MsgBase
	(*MsgHeader)(nil),                 // 19: milvus.proto.common.MsgHeader
	(*DMLMsgHeader)(nil),              // 20: milvus.proto.common.DMLMsgHeader
	(*PrivilegeExt)(nil),              // 21: milvus.proto.common.PrivilegeExt
	(*descriptor.MessageOptions)(nil), // 22: google.protobuf.MessageOptions
}
var file_common_proto_depIdxs = []int32{
	0,  // 0: milvus.proto.common.Status.error_code:type_name -> milvus.proto.common.ErrorCode
	3,  // 1: milvus.proto.common.PlaceholderValue.type:type_name -> milvus.proto.common.PlaceholderType
	15, // 2: milvus.proto.common.PlaceholderGroup.placeholders:type_name -> milvus.proto.common.PlaceholderValue
	4,  // 3: milvus.proto.common.MsgBase.msg_type:type_name -> milvus.proto.common.MsgType
	18, // 4: milvus.proto.common.MsgHeader.base:type_name -> milvus.proto.common.MsgBase
	18, // 5: milvus.proto.common.DMLMsgHeader.base:type_name -> milvus.proto.common.MsgBase
	9,  // 6: milvus.proto.common.PrivilegeExt.resource_type:type_name -> milvus.proto.common.ResourceType
	10, // 7: milvus.proto.common.PrivilegeExt.resource_privilege:type_name -> milvus.proto.common.ResourcePrivilege
	22, // 8: milvus.proto.common.privilege_ext_obj:extendee -> google.protobuf.MessageOptions
	21, // 9: milvus.proto.common.privilege_ext_obj:type_name -> milvus.proto.common.PrivilegeExt
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	9,  // [9:10] is the sub-list for extension type_name
	8,  // [8:9] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMLMsgHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   11,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
		ExtensionInfos:    file_common_proto_extTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
