// +build ignore

// Copyright (C) 2019-2021 Zilliz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under the License.

// This program generates entity/columns_{{FieldType}}.go. Invoked by go generate
package main

import (
	"fmt"
	"html/template"
	"os"
	"strings"
	"time"

	"github.com/milvus-io/milvus-sdk-go/entity"
)

var scalarColumnTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT
// This file is generated by go genrated at {{ .Timestamp }}

//Package entity defines entities used in sdk
package entity 

import "github.com/milvus-io/milvus-sdk-go/internal/proto/schema"

// Column{{.TypeName}} generated columns type for {{.TypeName}}
type Column{{.TypeName}} struct {
	name   string
	values []{{.TypeDef}}
}

// Name returns column name
func (c *Column{{.TypeName}}) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *Column{{.TypeName}}) Type() FieldType {
	return FieldType{{.TypeName}}
}

// Len returns column values length
func (c *Column{{.TypeName}}) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *Column{{.TypeName}}) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type: schema.DataType_{{.TypeName}},
		FieldName: c.name,
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_{{.PbName}}Data{
				{{.PbName}}Data: &schema.{{.PbName}}Array{
					Data: []{{.PbType}}{},
				},
			},
		},
	}
	return fd
}

// NewColumn{{.TypeName}} auto generated constructor
func NewColumn{{.TypeName}}(name string, values []{{.TypeDef}}) *Column{{.TypeName}} {
	return &Column{{.TypeName}} {
		name: name,
		values: values,
	}
}
`))
var vectorColumnTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT
// This file is generated by go genrated at {{ .Timestamp }}

//Package entity defines entities used in sdk
package entity 

import "github.com/milvus-io/milvus-sdk-go/internal/proto/schema"


// Column{{.TypeName}} generated columns type for {{.TypeName}}
type Column{{.TypeName}} struct {
	name   string
	dim    int
	values []{{.TypeDef}}
}

// Name returns column name
func (c *Column{{.TypeName}}) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *Column{{.TypeName}}) Type() FieldType {
	return FieldType{{.TypeName}}
}

// Len returns column data length
func (c * Column{{.TypeName}}) Len() int {
	return len(c.values)
}

// Dim returns vector dimension
func (c *Column{{.TypeName}}) Dim() int {
	return c.dim
}

// FieldData return column data mapped to schema.FieldData
func (c *Column{{.TypeName}}) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type: schema.DataType_{{.TypeName}},
		FieldName: c.name,
	}

	data := make({{.TypeDef}}, 0, len(c.values)* c.dim)

	for _, vector := range c.values {
		data = append(data, vector...)
	}

	fd.Field = &schema.FieldData_Vectors{
		Vectors: &schema.VectorField{
			Dim: int64(c.dim),
			{{if eq .TypeName "BinaryVector" }}
			Data: &schema.VectorField_BinaryVector{
				BinaryVector: data,
			},
			{{else}}
			Data: &schema.VectorField_FloatVector{
				FloatVector: &schema.FloatArray{
					Data: data,
				},
			},
			{{end}}
		},
	}
	return fd
}

// NewColumn{{.TypeName}} auto generated constructor
func NewColumn{{.TypeName}}(name string, dim int, values []{{.TypeDef}}) *Column{{.TypeName}} {
	return &Column{{.TypeName}} {
		name:   name,
		dim:    dim,
		values: values,
	}
}
`))

func main() {
	scalarFieldTypes := []entity.FieldType{
		entity.FieldTypeBool,
		entity.FieldTypeInt8,
		entity.FieldTypeInt16,
		entity.FieldTypeInt32,
		entity.FieldTypeInt64,
		entity.FieldTypeFloat,
		entity.FieldTypeDouble,
		entity.FieldTypeString,
	}
	vectorFieldTypes := []entity.FieldType{
		entity.FieldTypeBinaryVector,
		entity.FieldTypeFloatVector,
	}
	now := time.Now()
	fn := func(types []entity.FieldType, tmpl *template.Template, pf func(entity.FieldType) interface{}) {
		for _, ft := range types {
			f, err := os.OpenFile(fmt.Sprintf("columns_%s.go", strings.ToLower(ft.Name())), os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
			if err != nil {
				fmt.Println(err.Error())
			}
			defer f.Close()

			tmpl.Execute(f, pf(ft))
		}
	}
	fn(scalarFieldTypes, scalarColumnTemplate, func(ft entity.FieldType) interface{} {
		return struct {
			Timestamp time.Time
			TypeName  string
			TypeDef   string
			PbName    string
			PbType    string
		}{
			Timestamp: now,
			TypeName:  ft.Name(),
			TypeDef:   ft.String(),
			PbName:    "Int",
			PbType:    "int32",
		}
	})
	fn(vectorFieldTypes, vectorColumnTemplate, func(ft entity.FieldType) interface{} {
		return struct {
			Timestamp time.Time
			TypeName  string
			TypeDef   string
		}{
			Timestamp: now,
			TypeName:  ft.Name(),
			TypeDef:   ft.String(),
		}
	})
}
