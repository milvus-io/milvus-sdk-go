// Code generated by go generate; DO NOT EDIT
// This file is generated by go genrated at 2021-07-13 12:45:43.588182869 +0800 CST m=+0.003011487

//Package entity defines entities used in sdk
package entity 

import (
	"fmt"
	"math/rand"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/milvus-io/milvus-sdk-go/internal/proto/schema"
)

func TestColumnInt8(t *testing.T) {
	rand.Seed(time.Now().UnixNano())
	columnName := fmt.Sprintf("column_Int8_%d", rand.Int())
	columnLen := 8 + rand.Intn(10)

	v := make([]int8, columnLen)
	column := NewColumnInt8(columnName, v)

	t.Run("test meta", func(t *testing.T) {
		ft := FieldTypeInt8
		assert.Equal(t, "Int8", ft.Name())
		assert.Equal(t, "int8", ft.String())
		pbName, pbType := ft.PbFieldType()
		assert.Equal(t, "Int", pbName)
		assert.Equal(t, "int32", pbType)
	})

	t.Run("test column attribute", func(t *testing.T) {
		assert.Equal(t, columnName, column.Name())
		assert.Equal(t, FieldTypeInt8, column.Type())
		assert.Equal(t, columnLen, column.Len())
	})

	t.Run("test column field data", func(t *testing.T) {
		fd := column.FieldData()
		assert.NotNil(t, fd)
		assert.Equal(t, fd.GetFieldName(), columnName)
	})

	t.Run("test column value by idx", func(t *testing.T) {
		_, err := column.ValueByIdx(-1)
		assert.NotNil(t, err)
		_, err = column.ValueByIdx(columnLen)
		assert.NotNil(t, err)
		for i := 0; i < columnLen; i++ {
			v, err := column.ValueByIdx(i)
			assert.Nil(t, err)
			assert.Equal(t, column.values[i], v)
		}
	})
}

func TestFieldDataInt8Column(t *testing.T) {
	len := rand.Intn(10) + 8
	name := fmt.Sprintf("fd_Int8_%d", rand.Int())
	fd := &schema.FieldData{
		Type: schema.DataType_Int8,
		FieldName: name,
	}

	t.Run("normal usage", func(t *testing.T) {
		fd.Field = &schema.FieldData_Scalars{
			Scalars: &schema.ScalarField{
				Data: &schema.ScalarField_IntData{
					IntData: &schema.IntArray{
						Data: make([]int32, len),
					},
				},
			},
		}
		column, err:= FieldDataColumn(fd, 0, len)
		assert.Nil(t, err)
		assert.NotNil(t, column)
 
		assert.Equal(t, name, column.Name())
		assert.Equal(t, len, column.Len())
		assert.Equal(t, FieldTypeInt8, column.Type())
	})

	
	t.Run("nil data", func(t *testing.T) {
		fd.Field = nil
		_, err := FieldDataColumn(fd, 0, len)
		assert.NotNil(t, err)
	})
}
