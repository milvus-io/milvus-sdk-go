// Code generated by go generate; DO NOT EDIT
// This file is generated by go genrated at 2021-07-28 17:22:17.531936577 +0800 CST m=+0.003667571

package entity 

import (
	"fmt"
	"math/rand"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestColumnBinaryVector(t *testing.T) {
	rand.Seed(time.Now().UnixNano())
	columnName := fmt.Sprintf("column_BinaryVector_%d", rand.Int())
	columnLen := 8 + rand.Intn(10)
	dim := ([]int{8, 32, 64, 128})[rand.Intn(4)]

	v := make([][]byte, columnLen)
	column := NewColumnBinaryVector(columnName,dim, v)
	
	t.Run("test meta", func(t *testing.T) {
		ft := FieldTypeBinaryVector
		assert.Equal(t, "BinaryVector", ft.Name())
		assert.Equal(t, "[]byte", ft.String())
		pbName, pbType := ft.PbFieldType()
		assert.Equal(t, "[]byte", pbName)
		assert.Equal(t, "", pbType)
	})

	t.Run("test column attribute", func(t *testing.T) {
		assert.Equal(t, columnName, column.Name())
		assert.Equal(t, FieldTypeBinaryVector, column.Type())
		assert.Equal(t, columnLen, column.Len())
		assert.Equal(t, dim, column.Dim())
		assert.Equal(t ,v, column.Data())
		
		var ev []byte
		err := column.AppendValue(ev)
		assert.Equal(t, columnLen+1, column.Len())
		assert.Nil(t, err)
		
		err = column.AppendValue(struct{}{})
		assert.Equal(t, columnLen+1, column.Len())
		assert.NotNil(t, err)
	})

	t.Run("test column field data", func(t *testing.T) {
		fd := column.FieldData()
		assert.NotNil(t, fd)
		assert.Equal(t, fd.GetFieldName(), columnName)
	})

}

func TestColumnFloatVector(t *testing.T) {
	rand.Seed(time.Now().UnixNano())
	columnName := fmt.Sprintf("column_FloatVector_%d", rand.Int())
	columnLen := 8 + rand.Intn(10)
	dim := ([]int{8, 32, 64, 128})[rand.Intn(4)]

	v := make([][]float32, columnLen)
	column := NewColumnFloatVector(columnName,dim, v)
	
	t.Run("test meta", func(t *testing.T) {
		ft := FieldTypeFloatVector
		assert.Equal(t, "FloatVector", ft.Name())
		assert.Equal(t, "[]float32", ft.String())
		pbName, pbType := ft.PbFieldType()
		assert.Equal(t, "[]float32", pbName)
		assert.Equal(t, "", pbType)
	})

	t.Run("test column attribute", func(t *testing.T) {
		assert.Equal(t, columnName, column.Name())
		assert.Equal(t, FieldTypeFloatVector, column.Type())
		assert.Equal(t, columnLen, column.Len())
		assert.Equal(t, dim, column.Dim())
		assert.Equal(t ,v, column.Data())
		
		var ev []float32
		err := column.AppendValue(ev)
		assert.Equal(t, columnLen+1, column.Len())
		assert.Nil(t, err)
		
		err = column.AppendValue(struct{}{})
		assert.Equal(t, columnLen+1, column.Len())
		assert.NotNil(t, err)
	})

	t.Run("test column field data", func(t *testing.T) {
		fd := column.FieldData()
		assert.NotNil(t, fd)
		assert.Equal(t, fd.GetFieldName(), columnName)
	})

}

