// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at 2021-07-28 17:22:17.531936577 +0800 CST m=+0.003667571

package entity

import (
	"errors"
	"fmt"

	schema "github.com/milvus-io/milvus-proto/go-api/schemapb"
)

// ColumnBool generated columns type for Bool
type ColumnBool struct {
	name   string
	values []bool
}

// Name returns column name
func (c *ColumnBool) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnBool) Type() FieldType {
	return FieldTypeBool
}

// Len returns column values length
func (c *ColumnBool) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnBool) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Bool,
		FieldName: c.name,
	}
	data := make([]bool, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, bool(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_BoolData{
				BoolData: &schema.BoolArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnBool) ValueByIdx(idx int) (bool, error) {
	var r bool // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnBool) AppendValue(i interface{}) error {
	v, ok := i.(bool)
	if !ok {
		return fmt.Errorf("invalid type, expected bool, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnBool) Data() []bool {
	return c.values
}

// NewColumnBool auto generated constructor
func NewColumnBool(name string, values []bool) *ColumnBool {
	return &ColumnBool{
		name:   name,
		values: values,
	}
}

// ColumnInt8 generated columns type for Int8
type ColumnInt8 struct {
	name   string
	values []int8
}

// Name returns column name
func (c *ColumnInt8) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnInt8) Type() FieldType {
	return FieldTypeInt8
}

// Len returns column values length
func (c *ColumnInt8) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnInt8) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Int8,
		FieldName: c.name,
	}
	data := make([]int32, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, int32(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_IntData{
				IntData: &schema.IntArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnInt8) ValueByIdx(idx int) (int8, error) {
	var r int8 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnInt8) AppendValue(i interface{}) error {
	v, ok := i.(int8)
	if !ok {
		return fmt.Errorf("invalid type, expected int8, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnInt8) Data() []int8 {
	return c.values
}

// NewColumnInt8 auto generated constructor
func NewColumnInt8(name string, values []int8) *ColumnInt8 {
	return &ColumnInt8{
		name:   name,
		values: values,
	}
}

// ColumnInt16 generated columns type for Int16
type ColumnInt16 struct {
	name   string
	values []int16
}

// Name returns column name
func (c *ColumnInt16) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnInt16) Type() FieldType {
	return FieldTypeInt16
}

// Len returns column values length
func (c *ColumnInt16) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnInt16) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Int16,
		FieldName: c.name,
	}
	data := make([]int32, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, int32(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_IntData{
				IntData: &schema.IntArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnInt16) ValueByIdx(idx int) (int16, error) {
	var r int16 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnInt16) AppendValue(i interface{}) error {
	v, ok := i.(int16)
	if !ok {
		return fmt.Errorf("invalid type, expected int16, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnInt16) Data() []int16 {
	return c.values
}

// NewColumnInt16 auto generated constructor
func NewColumnInt16(name string, values []int16) *ColumnInt16 {
	return &ColumnInt16{
		name:   name,
		values: values,
	}
}

// ColumnInt32 generated columns type for Int32
type ColumnInt32 struct {
	name   string
	values []int32
}

// Name returns column name
func (c *ColumnInt32) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnInt32) Type() FieldType {
	return FieldTypeInt32
}

// Len returns column values length
func (c *ColumnInt32) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnInt32) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Int32,
		FieldName: c.name,
	}
	data := make([]int32, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, int32(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_IntData{
				IntData: &schema.IntArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnInt32) ValueByIdx(idx int) (int32, error) {
	var r int32 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnInt32) AppendValue(i interface{}) error {
	v, ok := i.(int32)
	if !ok {
		return fmt.Errorf("invalid type, expected int32, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnInt32) Data() []int32 {
	return c.values
}

// NewColumnInt32 auto generated constructor
func NewColumnInt32(name string, values []int32) *ColumnInt32 {
	return &ColumnInt32{
		name:   name,
		values: values,
	}
}

// ColumnInt64 generated columns type for Int64
type ColumnInt64 struct {
	name   string
	values []int64
}

// Name returns column name
func (c *ColumnInt64) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnInt64) Type() FieldType {
	return FieldTypeInt64
}

// Len returns column values length
func (c *ColumnInt64) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnInt64) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Int64,
		FieldName: c.name,
	}
	data := make([]int64, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, int64(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_LongData{
				LongData: &schema.LongArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnInt64) ValueByIdx(idx int) (int64, error) {
	var r int64 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnInt64) AppendValue(i interface{}) error {
	v, ok := i.(int64)
	if !ok {
		return fmt.Errorf("invalid type, expected int64, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnInt64) Data() []int64 {
	return c.values
}

// NewColumnInt64 auto generated constructor
func NewColumnInt64(name string, values []int64) *ColumnInt64 {
	return &ColumnInt64{
		name:   name,
		values: values,
	}
}

// ColumnFloat generated columns type for Float
type ColumnFloat struct {
	name   string
	values []float32
}

// Name returns column name
func (c *ColumnFloat) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnFloat) Type() FieldType {
	return FieldTypeFloat
}

// Len returns column values length
func (c *ColumnFloat) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnFloat) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Float,
		FieldName: c.name,
	}
	data := make([]float32, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, float32(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_FloatData{
				FloatData: &schema.FloatArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnFloat) ValueByIdx(idx int) (float32, error) {
	var r float32 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnFloat) AppendValue(i interface{}) error {
	v, ok := i.(float32)
	if !ok {
		return fmt.Errorf("invalid type, expected float32, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnFloat) Data() []float32 {
	return c.values
}

// NewColumnFloat auto generated constructor
func NewColumnFloat(name string, values []float32) *ColumnFloat {
	return &ColumnFloat{
		name:   name,
		values: values,
	}
}

// ColumnDouble generated columns type for Double
type ColumnDouble struct {
	name   string
	values []float64
}

// Name returns column name
func (c *ColumnDouble) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnDouble) Type() FieldType {
	return FieldTypeDouble
}

// Len returns column values length
func (c *ColumnDouble) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnDouble) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_Double,
		FieldName: c.name,
	}
	data := make([]float64, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, float64(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_DoubleData{
				DoubleData: &schema.DoubleArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnDouble) ValueByIdx(idx int) (float64, error) {
	var r float64 // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnDouble) AppendValue(i interface{}) error {
	v, ok := i.(float64)
	if !ok {
		return fmt.Errorf("invalid type, expected float64, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnDouble) Data() []float64 {
	return c.values
}

// NewColumnDouble auto generated constructor
func NewColumnDouble(name string, values []float64) *ColumnDouble {
	return &ColumnDouble{
		name:   name,
		values: values,
	}
}

// ColumnString generated columns type for String
type ColumnString struct {
	name   string
	values []string
}

// Name returns column name
func (c *ColumnString) Name() string {
	return c.name
}

// Type returns column FieldType
func (c *ColumnString) Type() FieldType {
	return FieldTypeString
}

// Len returns column values length
func (c *ColumnString) Len() int {
	return len(c.values)
}

// FieldData return column data mapped to schema.FieldData
func (c *ColumnString) FieldData() *schema.FieldData {
	fd := &schema.FieldData{
		Type:      schema.DataType_String,
		FieldName: c.name,
	}
	data := make([]string, 0, c.Len())
	for i := 0; i < c.Len(); i++ {
		data = append(data, string(c.values[i]))
	}
	fd.Field = &schema.FieldData_Scalars{
		Scalars: &schema.ScalarField{
			Data: &schema.ScalarField_StringData{
				StringData: &schema.StringArray{
					Data: data,
				},
			},
		},
	}
	return fd
}

// ValueByIdx returns value of the provided index
// error occurs when index out of range
func (c *ColumnString) ValueByIdx(idx int) (string, error) {
	var r string // use default value
	if idx < 0 || idx >= c.Len() {
		return r, errors.New("index out of range")
	}
	return c.values[idx], nil
}

// AppendValue append value into column
func (c *ColumnString) AppendValue(i interface{}) error {
	v, ok := i.(string)
	if !ok {
		return fmt.Errorf("invalid type, expected string, got %T", i)
	}
	c.values = append(c.values, v)

	return nil
}

// Data returns column data
func (c *ColumnString) Data() []string {
	return c.values
}

// NewColumnString auto generated constructor
func NewColumnString(name string, values []string) *ColumnString {
	return &ColumnString{
		name:   name,
		values: values,
	}
}
