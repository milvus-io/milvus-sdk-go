// Code generated by go generate; DO NOT EDIT
// This file is generated by go genrated at 2021-07-12 12:48:54.240744206 &#43;0800 CST m=&#43;0.002833978

//Package entity defines entities used in sdk
package entity 

import (
	"fmt"
	"math/rand"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/milvus-io/milvus-sdk-go/internal/proto/schema"
)

func TestColumnDouble(t *testing.T) {
	rand.Seed(time.Now().UnixNano())
	columnName := fmt.Sprintf("column_Double_%d", rand.Int())
	columnLen := 8 + rand.Intn(10)

	v := make([]float64, columnLen)
	column := NewColumnDouble(columnName, v)

	t.Run("test meta", func(t *testing.T) {
		ft := FieldTypeDouble
		assert.Equal(t, "Double", ft.Name())
		assert.Equal(t, "float64", ft.String())
		pbName, pbType := ft.PbFieldType()
		assert.Equal(t, "Double", pbName)
		assert.Equal(t, "float64", pbType)
	})

	t.Run("test column attribute", func(t *testing.T) {
		assert.Equal(t, columnName, column.Name())
		assert.Equal(t, FieldTypeDouble, column.Type())
		assert.Equal(t, columnLen, column.Len())
	})

	t.Run("test column field data", func(t *testing.T) {
		fd := column.FieldData()
		assert.NotNil(t, fd)
		assert.Equal(t, fd.GetFieldName(), columnName)
	})
}

func TestFieldDataDoubleColumn(t *testing.T) {
	len := rand.Intn(10) + 8
	name := fmt.Sprintf("fd_Double_%d", rand.Int())
	fd := &schema.FieldData{
		Type: schema.DataType_Double,
		FieldName: name,
	}

	t.Run("normal usage", func(t *testing.T) {
		fd.Field = &schema.FieldData_Scalars{
			Scalars: &schema.ScalarField{
				Data: &schema.ScalarField_DoubleData{
					DoubleData: &schema.DoubleArray{
						Data: make([]float64, len),
					},
				},
			},
		}
		column, err:= FieldDataColumn(fd, 0, len)
		assert.Nil(t, err)
		assert.NotNil(t, column)
 
		assert.Equal(t, name, column.Name())
		assert.Equal(t, len, column.Len())
		assert.Equal(t, FieldTypeDouble, column.Type())
	})

	t.Run("nil data", func(t *testing.T) {
		fd.Field = nil
		_, err := FieldDataColumn(fd, 0, len)
		assert.NotNil(t, err)
	})
}
